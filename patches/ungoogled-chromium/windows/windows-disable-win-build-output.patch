# Disable verification of certain binary outputs against third_party/win_build_output.
# The referenced binaries are pruned during binary pruning
# Replace pruned binaries with files generated by third_party/win_build_output

--- a/build/toolchain/win/midl.py
+++ b/build/toolchain/win/midl.py
@@ -7,7 +7,7 @@ from __future__ import print_function
 
 import array
 import difflib
-import distutils.dir_util
+import distutils.file_util
 import filecmp
 import io
 import operator
@@ -445,41 +445,13 @@ def main(arch, gendir, outdir, dynamic_g
   if returncode != 0:
     return returncode
 
-  # Now compare the output in midl_output_dir to the copied-over outputs.
+  # Copy missing files (pruned binary .tlb files) to the output.
   _, mismatch, errors = filecmp.cmpfiles(midl_output_dir, outdir, common_files)
   assert not errors
 
   if mismatch:
-    print('midl.exe output different from files in %s, see %s' %
-          (outdir, midl_output_dir))
     for f in mismatch:
-      if f.endswith('.tlb'): continue
-      fromfile = os.path.join(outdir, f)
-      tofile = os.path.join(midl_output_dir, f)
-      print(''.join(
-          difflib.unified_diff(
-              io.open(fromfile).readlines(),
-              io.open(tofile).readlines(), fromfile, tofile)))
-
-    if dynamic_guids:
-      # |idl_template| can contain one or more occurrences of guids prefixed
-      # with 'PLACEHOLDER-GUID-'. We first remove the extraneous
-      # 'PLACEHOLDER-GUID-' prefix and then run MIDL on the substituted IDL
-      # file.
-      # No guid substitutions are done at this point, because we want to compile
-      # with the placeholder guids and then instruct the user to copy the output
-      # over to |source| which is typically src\third_party\win_build_output\.
-      # In future runs, the placeholder guids in |source| are replaced with the
-      # guids specified in |dynamic_guids|.
-      generate_idl_from_template(idl_template, None, idl)
-      returncode, midl_output_dir = run_midl(args, env_dict)
-      if returncode != 0:
-        return returncode
-
-    print('To rebaseline:')
-    print(r'  copy /y %s\* %s' % (midl_output_dir, source))
-    return 1
-
+      distutils.file_util.copy_file(os.path.join(midl_output_dir, f), outdir, preserve_times=False)
   return 0
 
 
--- a/build/win/message_compiler.py
+++ b/build/win/message_compiler.py
@@ -119,24 +119,6 @@ def main():
         header_contents += sorted(define_block, key=lambda s: s.split()[-1])
       with open(header_file, 'wb') as f:
         f.write(''.join(header_contents))
-
-    # mc.exe invocation and post-processing are complete, now compare the output
-    # in tmp_dir to the checked-in outputs.
-    diff = filecmp.dircmp(tmp_dir, source)
-    if diff.diff_files or set(diff.left_list) != set(diff.right_list):
-      print('mc.exe output different from files in %s, see %s' % (source,
-                                                                  tmp_dir))
-      diff.report()
-      for f in diff.diff_files:
-        if f.endswith('.bin'): continue
-        fromfile = os.path.join(source, f)
-        tofile = os.path.join(tmp_dir, f)
-        print(''.join(
-            difflib.unified_diff(
-                open(fromfile, 'U').readlines(),
-                open(tofile, 'U').readlines(), fromfile, tofile)))
-      delete_tmp_dir = False
-      sys.exit(1)
   except subprocess.CalledProcessError as e:
     print(e.output)
     sys.exit(e.returncode)
