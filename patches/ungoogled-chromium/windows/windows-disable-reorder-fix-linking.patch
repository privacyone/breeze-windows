# Disable reordering imports

--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -65,29 +65,6 @@ if (is_win && enable_resource_allowlist_
   _chrome_resource_allowlist = "$target_gen_dir/chrome_resource_allowlist.txt"
 }
 
-if (is_win) {
-  action("reorder_imports") {
-    script = "//build/win/reorder-imports.py"
-
-    # See comment in chrome_dll.gypi in the hardlink_to_output
-    # target for why this cannot be 'initial' like the DLL.
-    inputs = [ "$root_out_dir/initialexe/chrome.exe" ]
-    outputs = [
-      "$root_out_dir/chrome.exe",
-      "$root_out_dir/chrome.exe.pdb",
-    ]
-    args = [
-      "-i",
-      rebase_path("$root_out_dir/initialexe", root_build_dir),
-      "-o",
-      rebase_path("$root_out_dir", root_build_dir),
-      "-a",
-      current_cpu,
-    ]
-    deps = [ ":chrome_initial" ]
-  }
-}
-
 # This target exists above chrome and it's main components in the dependency
 # tree as a central place to put assert_no_deps annotations. Since this depends
 # on Chrome and the main DLLs it uses, it will transitively assert that those
@@ -127,20 +104,12 @@ if (!is_android && !is_mac) {
     # Windows-only deps are OK because chrome_initial uses initialexe/chrome as
     # the output name for that platform.
     # See crbug.com/1146571.
-    if (is_win) {
-      public_deps += [ ":reorder_imports" ]
-      data_deps += [ ":reorder_imports" ]
-    }
   }
 
   executable("chrome_initial") {
     configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
     configs += [ "//build/config/compiler:thinlto_optimize_max" ]
-    if (is_win) {
-      output_name = "initialexe/chrome"
-    } else {
-      output_name = "chrome"
-    }
+    output_name = "chrome"
 
     # Because the sources list varies so significantly per-platform, generally
     # each platform lists its own files rather than relying on filtering or
--- a/chrome/test/chromedriver/BUILD.gn
+++ b/chrome/test/chromedriver/BUILD.gn
@@ -354,11 +354,6 @@ python_library("chromedriver_py_tests")
   if (is_component_build && is_mac) {
     data_deps += [ "//chrome:chrome_framework" ]
   }
-
-  if (is_win) {
-    # On Windows, the following target produces the final chrome.exe
-    data_deps += [ "//chrome:reorder_imports" ]
-  }
 }
 
 python_library("chromedriver_replay_unittests") {
--- a/tools/perf/chrome_telemetry_build/BUILD.gn
+++ b/tools/perf/chrome_telemetry_build/BUILD.gn
@@ -41,10 +41,6 @@ group("telemetry_chrome_test") {
     data_deps += [ "//chrome" ]
   }
 
-  if (is_win) {
-    data_deps += [ "//chrome:reorder_imports" ]
-  }
-
   if (is_linux || is_chromeos) {
     data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
 
