# Fix building without Safe Browsing on Windows
# This also removes other unnecessary services that depend on Safe Browsing, such as Chrome Cleaner

--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -136,7 +136,6 @@
   X("renderer_host")                                                     \
   X("renderer.scheduler")                                                \
   X("RLZ")                                                               \
-  X("safe_browsing")                                                     \
   X("screenlock_monitor")                                                \
   X("segmentation_platform")                                             \
   X("sequence_manager")                                                  \
--- a/base/trace_event/memory_infra_background_allowlist.cc
+++ b/base/trace_event/memory_infra_background_allowlist.cc
@@ -258,18 +258,7 @@ const char* const kAllocatorDumpNameAllo
     "net/url_request_context/proxy/0x?/http_cache/memory_backend",
     "net/url_request_context/proxy/0x?/http_cache/simple_backend",
     "net/url_request_context/proxy/0x?/http_network_session",
-    "net/url_request_context/safe_browsing",
-    "net/url_request_context/safe_browsing/0x?",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/cookies",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
-    "tasks_pending_global",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
     "tasks_pending_for_key",
-    "net/url_request_context/safe_browsing/0x?/http_cache",
-    "net/url_request_context/safe_browsing/0x?/http_cache/memory_backend",
-    "net/url_request_context/safe_browsing/0x?/http_cache/simple_backend",
-    "net/url_request_context/safe_browsing/0x?/http_network_session",
     "net/url_request_context/system",
     "net/url_request_context/system/0x?",
     "net/url_request_context/system/0x?/cookie_monster",
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -39,10 +39,7 @@ source_set("chrome_dll_resources") {
   deps = [ ":command_ids" ]
 
   if (is_win) {
-    sources += [
-      "chrome_dll.rc",
-      "etw_events/chrome_events_win.rc",
-    ]
+    sources += [ "chrome_dll.rc" ]
 
     deps += [
       "//build:branding_buildflags",
--- a/chrome/app/chromium_strings.grd
+++ b/chrome/app/chromium_strings.grd
@@ -528,14 +528,6 @@ Chromium is unable to recover your setti
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chromium has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chromium has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chromium has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chromium has blocked it.
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -1848,18 +1848,6 @@ are declared in tools/grit/grit_rule.gni
           Extensions, apps, and themes can harm your computer. Are you sure you want to continue?
         </message>
       </if>
-      <message name="IDS_PROMPT_DANGEROUS_DOWNLOAD_ACCOUNT_COMPROMISE"
-        desc="Message shown to the user to validate the download when the download content is deteremined to be associated with account compromise by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> could let attackers steal your personal information.
-      </message>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> is not commonly downloaded and may be dangerous.
-      </message>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing. This variant is shown when the user is enrolled in the Advanced Protection program.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> was blocked by Advanced Protection.
-      </message>
       <message name="IDS_PROMPT_DEEP_SCANNING_DOWNLOAD"
         desc="Message shown in the download shelf when a download is being scanned">
         Checking <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> with your organization's security policies...
--- a/chrome/app/google_chrome_strings.grd
+++ b/chrome/app/google_chrome_strings.grd
@@ -534,14 +534,6 @@ Google Chrome is unable to recover your
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chrome has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chrome has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chrome has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chrome has blocked it.
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -338,8 +338,6 @@ static_library("browser") {
     "component_updater/ssl_error_assistant_component_installer.h",
     "component_updater/sth_set_component_remover.cc",
     "component_updater/sth_set_component_remover.h",
-    "component_updater/subresource_filter_component_installer.cc",
-    "component_updater/subresource_filter_component_installer.h",
     "component_updater/trust_token_key_commitments_component_installer.cc",
     "component_updater/trust_token_key_commitments_component_installer.h",
     "consent_auditor/consent_auditor_factory.cc",
@@ -1868,10 +1866,6 @@ static_library("browser") {
     "//chrome/browser/ui",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/storage_access_api:permissions",
-    "//chrome/browser/safe_browsing",
-    "//chrome/browser/safe_browsing:verdict_cache_manager_factory",
-    "//chrome/browser/safe_browsing:advanced_protection",
-    "//chrome/browser/safe_browsing:metrics_collector",
 
     # TODO(crbug.com/1030821): Eliminate usages of browser.h from Media Router.
     "//chrome/browser/media/router",
@@ -1957,10 +1951,6 @@ static_library("browser") {
     "//chrome/browser/push_messaging:budget_proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
     "//chrome/browser/resource_coordinator:tab_manager_features",
-    "//chrome/browser/safe_browsing",
-    "//chrome/browser/safe_browsing:advanced_protection",
-    "//chrome/browser/safe_browsing:metrics_collector",
-    "//chrome/browser/safe_browsing:verdict_cache_manager_factory",
     "//chrome/browser/sharing:buildflags",
     "//chrome/browser/sharing/proto",
     "//chrome/browser/signin:identity_manager_provider",
@@ -2180,18 +2170,6 @@ static_library("browser") {
     "//components/reputation/core",
     "//components/reputation/core:proto",
     "//components/resources",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/browser:safe_browsing_service",
-    "//components/safe_browsing/content/browser/password_protection",
-    "//components/safe_browsing/content/browser/web_ui",
-    "//components/safe_browsing/core/browser",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/browser/realtime:policy_engine",
-    "//components/safe_browsing/core/browser/realtime:url_lookup_service",
-    "//components/safe_browsing/core/browser/sync",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_policy_handler",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/safe_search_api",
     "//components/safe_search_api:safe_search_client",
     "//components/schema_org/common:improved_mojom",
@@ -5052,8 +5030,6 @@ static_library("browser") {
       "chrome_browser_main_win.cc",
       "chrome_browser_main_win.h",
       "component_updater/recovery_improved_component_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.h",
       "download/download_status_updater_win.cc",
       "download/trusted_sources_manager_win.cc",
       "enterprise/signals/device_info_fetcher_win.cc",
@@ -5195,8 +5171,6 @@ static_library("browser") {
       "//base/win:base_win_buildflags",
       "//chrome/app:chrome_exe_main_exports",
       "//chrome/app/theme:chrome_unscaled_resources_grit",
-      "//chrome/browser/safe_browsing/chrome_cleaner",
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/web_applications/chrome_pwa_launcher:util",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/chrome_elf:constants",
@@ -5225,8 +5199,6 @@ static_library("browser") {
       "//ui/base:fullscreen_win",
       "//ui/base/cursor",
     ]
-    allow_circular_includes_from +=
-        [ "//chrome/browser/safe_browsing/chrome_cleaner" ]
 
     all_dependent_configs = [ ":browser_win_linker_flags" ]
 
@@ -7088,10 +7060,6 @@ grit("resources") {
       "//chrome/browser/ui/webui/settings/chromeos/os_apps_page/mojom:mojom_js",
     ]
   }
-
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/browser/ui/webui/reset_password:mojo_bindings_js" ]
-  }
 }
 
 if (is_chrome_branded) {
@@ -7233,7 +7201,6 @@ static_library("test_support") {
   public_deps = [
     ":browser",
     "//chrome/browser/profiles:profile",
-    "//chrome/browser/safe_browsing:test_support",
     "//chrome/browser/ui:test_support",
   ]
   deps = [
@@ -7242,7 +7209,6 @@ static_library("test_support") {
     "//chrome/app/theme:theme_resources",
     "//chrome/common",
     "//chrome/common/notifications",
-    "//chrome/common/safe_browsing:proto",
     "//components/consent_auditor:test_support",
     "//components/invalidation/impl",
     "//components/invalidation/impl:test_support",
@@ -7260,7 +7226,6 @@ static_library("test_support") {
     "//components/reporting/util:task_runner_context",
     "//components/reputation/core",
     "//components/reputation/core:proto",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/search_engines:test_support",
     "//components/security_interstitials/content:security_interstitial_page",
     "//components/services/unzip/content",
@@ -7460,7 +7425,6 @@ static_library("test_support") {
     deps += [
       "//components/crx_file",
       "//components/drive:test_support",
-      "//components/safe_browsing/core/browser/db:v4_test_util",
       "//components/services/unzip:in_process",
       "//components/storage_monitor:test_support",
       "//extensions:test_support",
@@ -7499,34 +7463,6 @@ static_library("test_support") {
     ]
   }
 
-  if (safe_browsing_mode != 0) {
-    # "Safe Browsing Basic" files used for safe browsing in full mode
-    #(safe_browsing = 1) and mobile(=2)
-    sources += [
-      "safe_browsing/certificate_reporting_service_test_utils.cc",
-      "safe_browsing/certificate_reporting_service_test_utils.h",
-    ]
-    deps += [
-      "//chrome/browser/safe_browsing",
-      "//components/encrypted_messages",
-      "//components/security_interstitials/content:security_interstitial_page",
-    ]
-  }
-
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "enterprise/connectors/analysis/fake_content_analysis_delegate.cc",
-      "enterprise/connectors/analysis/fake_content_analysis_delegate.h",
-      "extensions/fake_safe_browsing_database_manager.cc",
-      "extensions/fake_safe_browsing_database_manager.h",
-    ]
-    deps += [
-      "//chrome/browser/safe_browsing",
-      "//components/enterprise/common/proto:connectors_proto",
-      "//components/safe_browsing/core/browser/db:test_database_manager",
-    ]
-  }
-
   if (has_spellcheck_panel) {
     sources += [
       "spellchecker/test/spellcheck_mock_panel_host.cc",
--- a/chrome/browser/DEPS
+++ b/chrome/browser/DEPS
@@ -262,12 +262,7 @@ include_rules = [
   "+components/reputation",
   "+components/reporting",
   "+components/rlz",
-  "+components/safe_browsing/android",
   "+components/safe_browsing/buildflags.h",
-  "+components/safe_browsing/content/browser",
-  "+components/safe_browsing/content/common",
-  "+components/safe_browsing/core/browser",
-  "+components/safe_browsing/core/common",
   "+components/safe_search_api",
   "+components/schema_org",
   "+components/shared_highlighting/core/common",
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -210,11 +210,6 @@ class BrowserProcess {
   // on this platform (or this is a unit test).
   virtual StatusTray* status_tray() = 0;
 
-  // Returns the service providing versioned storage for rules used by the Safe
-  // Browsing subresource filter.
-  virtual subresource_filter::RulesetService*
-  subresource_filter_ruleset_service() = 0;
-
   // Returns the service providing versioned storage for a list of limit values
   // for calculating the floc based on SortingLSH.
   virtual federated_learning::FlocSortingLshClustersService*
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -112,7 +112,6 @@
 #include "components/prefs/json_pref_store.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/browser/safe_browsing_service_interface.h"
 #include "components/sessions/core/session_id_generator.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
 #include "components/translate/core/browser/translate_download_manager.h"
@@ -1036,14 +1035,6 @@ StatusTray* BrowserProcessImpl::status_t
   return status_tray_.get();
 }
 
-subresource_filter::RulesetService*
-BrowserProcessImpl::subresource_filter_ruleset_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_subresource_filter_ruleset_service_)
-    CreateSubresourceFilterRulesetService();
-  return subresource_filter_ruleset_service_.get();
-}
-
 federated_learning::FlocSortingLshClustersService*
 BrowserProcessImpl::floc_sorting_lsh_clusters_service() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
@@ -1300,16 +1291,6 @@ void BrowserProcessImpl::CreateBackgroun
 #endif
 }
 
-void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
-  DCHECK(!subresource_filter_ruleset_service_);
-  created_subresource_filter_ruleset_service_ = true;
-
-  base::FilePath user_data_dir;
-  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
-  subresource_filter_ruleset_service_ =
-      subresource_filter::RulesetService::Create(local_state(), user_data_dir);
-}
-
 void BrowserProcessImpl::CreateFlocSortingLshClustersService() {
   DCHECK(!floc_sorting_lsh_clusters_service_);
   floc_sorting_lsh_clusters_service_ =
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -186,8 +186,6 @@ class BrowserProcessImpl : public Browse
       std::unique_ptr<BackgroundModeManager> manager) override;
 #endif
   StatusTray* status_tray() override;
-  subresource_filter::RulesetService* subresource_filter_ruleset_service()
-      override;
   federated_learning::FlocSortingLshClustersService*
   floc_sorting_lsh_clusters_service() override;
 
@@ -238,8 +236,6 @@ class BrowserProcessImpl : public Browse
   void CreateNotificationUIManager();
   void CreatePrintPreviewDialogController();
   void CreateBackgroundPrintingManager();
-  void CreateSafeBrowsingService();
-  void CreateSubresourceFilterRulesetService();
   void CreateFlocBlocklistService();
   void CreateFlocSortingLshClustersService();
   void CreateOptimizationGuideService();
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -355,11 +355,6 @@
       <if expr="chromeos">
         <include name="IDR_ASSISTANT_LOGO_PNG" file="resources\chromeos\assistant_optin\assistant_logo.png" type="BINDATA" />
       </if>
-      <if expr="safe_browsing_mode == 1">
-        <include name="IDR_RESET_PASSWORD_HTML" file="resources\reset_password\reset_password.html" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_JS" file="resources\reset_password\reset_password.js" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_MOJOM_WEBUI_JS" file="${root_gen_dir}\mojom-webui\chrome\browser\ui\webui\reset_password\reset_password.mojom-webui.js" use_base_dir="false" type="BINDATA" />
-      </if>
       <if expr="not is_android">
         <include name="IDR_TAB_RANKER_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\example_preprocessor_config.pb" type="BINDATA" />
         <include name="IDR_TAB_RANKER_PAIRWISE_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\pairwise_preprocessor_config.pb" type="BINDATA" />
--- a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
+++ b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
@@ -54,7 +54,6 @@
 #include "chrome/browser/password_manager/password_store_factory.h"
 #include "chrome/browser/permissions/permission_actions_history.h"
 #include "chrome/browser/permissions/permission_decision_auto_blocker_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/signin/chrome_signin_client_factory.h"
 #include "chrome/browser/signin/test_signin_client_builder.h"
 #include "chrome/browser/spellchecker/spellcheck_custom_dictionary.h"
@@ -111,7 +110,6 @@
 #include "components/permissions/permission_util.h"
 #include "components/permissions/request_type.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/browser/verdict_cache_manager.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/site_isolation/pref_names.h"
 #include "content/public/browser/browser_context.h"
@@ -317,49 +315,6 @@ class RemoveCookieTester {
   mojo::Remote<network::mojom::CookieManager> cookie_manager_;
 };
 
-class RemoveSafeBrowsingCookieTester : public RemoveCookieTester {
- public:
-  RemoveSafeBrowsingCookieTester()
-      : browser_process_(TestingBrowserProcess::GetGlobal()) {
-    // TODO(crbug/925153): Port consumers of the |sb_service| to use the
-    // interface in components/safe_browsing, and remove this cast.
-    scoped_refptr<safe_browsing::SafeBrowsingService> sb_service =
-        static_cast<safe_browsing::SafeBrowsingService*>(
-            safe_browsing::SafeBrowsingService::CreateSafeBrowsingService());
-    browser_process_->SetSafeBrowsingService(sb_service.get());
-    sb_service->Initialize();
-    base::RunLoop().RunUntilIdle();
-
-    // Make sure the safe browsing cookie store has no cookies.
-    // TODO(mmenke): Is this really needed?
-    base::RunLoop run_loop;
-    mojo::Remote<network::mojom::CookieManager> cookie_manager;
-    sb_service->GetNetworkContext()->GetCookieManager(
-        cookie_manager.BindNewPipeAndPassReceiver());
-    cookie_manager->DeleteCookies(
-        network::mojom::CookieDeletionFilter::New(),
-        base::BindLambdaForTesting(
-            [&](uint32_t num_deleted) { run_loop.Quit(); }));
-    run_loop.Run();
-
-    SetCookieManager(std::move(cookie_manager));
-  }
-
-  RemoveSafeBrowsingCookieTester(const RemoveSafeBrowsingCookieTester&) =
-      delete;
-  RemoveSafeBrowsingCookieTester& operator=(
-      const RemoveSafeBrowsingCookieTester&) = delete;
-
-  virtual ~RemoveSafeBrowsingCookieTester() {
-    browser_process_->safe_browsing_service()->ShutDown();
-    base::RunLoop().RunUntilIdle();
-    browser_process_->SetSafeBrowsingService(nullptr);
-  }
-
- private:
-  TestingBrowserProcess* browser_process_;
-};
-
 class RemoveHistoryTester {
  public:
   RemoveHistoryTester() = default;
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -1145,12 +1145,6 @@ void ChromeBrowserMainParts::PreBrowserS
 
   CheckPakFileIntegrity();
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
 
 void ChromeBrowserMainParts::PostBrowserStart() {
--- a/chrome/browser/chrome_browser_main_win.cc
+++ b/chrome/browser/chrome_browser_main_win.cc
@@ -50,9 +50,6 @@
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/profiles/profile_shortcut_manager.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_util_win.h"
 #include "chrome/browser/shell_integration_win.h"
 #include "chrome/browser/ui/accessibility_util.h"
 #include "chrome/browser/ui/simple_message_box.h"
@@ -451,15 +448,6 @@ void ShowCloseBrowserFirstMessageBox() {
       l10n_util::GetStringUTF16(IDS_UNINSTALL_CLOSE_APP));
 }
 
-void MaybePostSettingsResetPrompt() {
-  if (base::FeatureList::IsEnabled(safe_browsing::kSettingsResetPrompt)) {
-    content::GetUIThreadTaskRunner({base::TaskPriority::BEST_EFFORT})
-        ->PostTask(FROM_HERE,
-                   base::BindOnce(
-                       safe_browsing::MaybeShowSettingsResetPromptWithDelay));
-  }
-}
-
 // Updates all Progressive Web App launchers in |profile_dir| to the latest
 // version.
 void UpdatePwaLaunchersForProfile(const base::FilePath& profile_dir) {
@@ -667,23 +655,6 @@ void ChromeBrowserMainPartsWin::PostBrow
 
   InitializeChromeElf();
 
-  // Reset settings for the current profile if it's tagged to be reset after a
-  // complete run of the Chrome Cleanup tool. If post-cleanup settings reset is
-  // enabled, we delay checks for settings reset prompt until the scheduled
-  // reset is finished.
-  if (safe_browsing::PostCleanupSettingsResetter::IsEnabled() &&
-      !parsed_command_line().HasSwitch(switches::kAppId)) {
-    // Using last opened profiles, because we want to find reset the profile
-    // that was open in the last Chrome run, which may not be open yet in
-    // the current run.
-    safe_browsing::PostCleanupSettingsResetter().ResetTaggedProfiles(
-        g_browser_process->profile_manager()->GetLastOpenedProfiles(),
-        base::BindOnce(&MaybePostSettingsResetPrompt),
-        std::make_unique<
-            safe_browsing::PostCleanupSettingsResetter::Delegate>());
-  } else {
-    MaybePostSettingsResetPrompt();
-  }
   // Record UMA data about whether the fault-tolerant heap is enabled.
   // Use a delayed task to minimize the impact on startup time.
   content::GetUIThreadTaskRunner({})->PostDelayedTask(
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -103,13 +103,6 @@
 #include "chrome/browser/profiling_host/chrome_browser_main_extra_parts_profiling.h"
 #include "chrome/browser/renderer_host/chrome_navigation_ui_data.h"
 #include "chrome/browser/renderer_preferences_util.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
-#include "chrome/browser/safe_browsing/delayed_warning_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
-#include "chrome/browser/safe_browsing/url_lookup_service_factory.h"
 #include "chrome/browser/search/search.h"
 #include "chrome/browser/sharing/sms/sms_remote_fetcher.h"
 #include "chrome/browser/signin/chrome_signin_proxying_url_loader_factory.h"
@@ -214,13 +207,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
-#include "components/safe_browsing/content/browser/password_protection/password_protection_navigation_throttle.h"
-#include "components/safe_browsing/content/browser/safe_browsing_navigation_throttle.h"
-#include "components/safe_browsing/core/browser/realtime/policy_engine.h"
-#include "components/safe_browsing/core/browser/realtime/url_lookup_service.h"
-#include "components/safe_browsing/core/browser/url_checker_delegate.h"
-#include "components/safe_browsing/core/common/features.h"
 #include "components/security_interstitials/content/insecure_form_navigation_throttle.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
@@ -4977,25 +4963,6 @@ void ChromeContentBrowserClient::WillCre
 #endif
 }
 
-void ChromeContentBrowserClient::SafeBrowsingWebApiHandshakeChecked(
-    std::unique_ptr<safe_browsing::WebApiHandshakeChecker> checker,
-    const content::GlobalRenderFrameHostId& frame_id,
-    const GURL& url,
-    mojo::PendingRemote<network::mojom::WebTransportHandshakeClient>
-        handshake_client,
-    WillCreateWebTransportCallback callback,
-    safe_browsing::WebApiHandshakeChecker::CheckResult result) {
-  if (result == safe_browsing::WebApiHandshakeChecker::CheckResult::kProceed) {
-    MaybeInterceptWebTransport(frame_id, url, std::move(handshake_client),
-                               std::move(callback));
-  } else {
-    std::move(callback).Run(std::move(handshake_client),
-                            network::mojom::WebTransportError::New(
-                                net::ERR_ABORTED, quic::QUIC_INTERNAL_ERROR,
-                                "SafeBrowsing check failed", false));
-  }
-}
-
 void ChromeContentBrowserClient::MaybeInterceptWebTransport(
     const content::GlobalRenderFrameHostId& frame_id,
     const GURL& url,
@@ -5449,37 +5416,6 @@ const ui::NativeTheme* ChromeContentBrow
   return ui::NativeTheme::GetInstanceForWeb();
 }
 
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
-    bool safe_browsing_enabled_for_profile,
-    bool should_check_on_sb_disabled,
-    const std::vector<std::string>& allowlist_domains) {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  return nullptr;
-}
-
-safe_browsing::RealTimeUrlLookupServiceBase*
-ChromeContentBrowserClient::GetUrlLookupService(
-    content::BrowserContext* browser_context,
-    bool is_enterprise_lookup_enabled,
-    bool is_consumer_lookup_enabled) {
-  // |safe_browsing_service_| may be unavailable in tests.
-  if (!safe_browsing_service_) {
-    return nullptr;
-  }
-
-  Profile* profile = Profile::FromBrowserContext(browser_context);
-
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-  if (is_enterprise_lookup_enabled) {
-    return safe_browsing::ChromeEnterpriseRealTimeUrlLookupServiceFactory::
-        GetForProfile(profile);
-  }
-#endif
-  return nullptr;
-}
-
 absl::optional<std::string>
 ChromeContentBrowserClient::GetOriginPolicyErrorPage(
     network::OriginPolicyState error_reason,
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -71,12 +71,6 @@ namespace permissions {
 class BluetoothDelegateImpl;
 }  // namespace permissions
 
-namespace safe_browsing {
-class RealTimeUrlLookupServiceBase;
-class SafeBrowsingService;
-class UrlCheckerDelegate;
-}  // namespace safe_browsing
-
 namespace sandbox {
 class SeatbeltExecClient;
 }  // namespace sandbox
@@ -784,37 +778,6 @@ class ChromeContentBrowserClient : publi
       bool allow);
 #endif
 
-  // Returns the existing UrlCheckerDelegate object if it is already created.
-  // Otherwise, creates a new one and returns it. Updates the
-  // |allowlist_domains| in the UrlCheckerDelegate object before returning. It
-  // returns nullptr if |safe_browsing_enabled_for_profile| is false, because it
-  // should bypass safe browsing check when safe browsing is disabled. Set
-  // |should_check_on_sb_disabled| to true if you still want to perform safe
-  // browsing check when safe browsing is disabled(e.g. for enterprise real time
-  // URL check).
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate(
-      bool safe_browsing_enabled_for_profile,
-      bool should_check_on_sb_disabled,
-      const std::vector<std::string>& allowlist_domains);
-
-  // Returns a RealTimeUrlLookupServiceBase object used for real time URL check.
-  // Returns an enterprise version if |is_enterprise_lookup_enabled| is true.
-  // Returns a consumer version if |is_enterprise_lookup_enabled| is false and
-  // |is_consumer_lookup_enabled| is true. Returns nullptr if both are false.
-  safe_browsing::RealTimeUrlLookupServiceBase* GetUrlLookupService(
-      content::BrowserContext* browser_context,
-      bool is_enterprise_lookup_enabled,
-      bool is_consumer_lookup_enabled);
-
-  void SafeBrowsingWebApiHandshakeChecked(
-      std::unique_ptr<safe_browsing::WebApiHandshakeChecker> checker,
-      const content::GlobalRenderFrameHostId& frame_id,
-      const GURL& url,
-      mojo::PendingRemote<network::mojom::WebTransportHandshakeClient>
-          handshake_client,
-      WillCreateWebTransportCallback callback,
-      safe_browsing::WebApiHandshakeChecker::CheckResult result);
   void MaybeInterceptWebTransport(
       const content::GlobalRenderFrameHostId& frame_id,
       const GURL& url,
@@ -831,10 +794,6 @@ class ChromeContentBrowserClient : publi
   // Parts are deleted in the reverse order they are added.
   std::vector<ChromeContentBrowserClientParts*> extra_parts_;
 
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-      safe_browsing_url_checker_delegate_;
-
   StartupData startup_data_;
 
 #if !defined(OS_ANDROID)
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -37,7 +37,6 @@
 #include "components/page_load_metrics/browser/metrics_web_contents_observer.h"
 #include "components/password_manager/content/browser/content_password_manager_driver_factory.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/security_interstitials/content/security_interstitial_tab_helper.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.h"
@@ -123,20 +122,6 @@
 
 namespace {
 
-// Helper method for ExposeInterfacesToRenderer() that checks the latest
-// SafeBrowsing pref value on the UI thread before hopping over to the IO
-// thread.
-void MaybeCreateSafeBrowsingForRenderer(
-    int process_id,
-    content::ResourceContext* resource_context,
-    base::RepeatingCallback<scoped_refptr<safe_browsing::UrlCheckerDelegate>(
-        bool safe_browsing_enabled,
-        bool should_check_on_sb_disabled,
-        const std::vector<std::string>& allowlist_domains)>
-        get_checker_delegate,
-    mojo::PendingReceiver<safe_browsing::mojom::SafeBrowsing> receiver) {
-}
-
 // BadgeManager is not used for Android.
 #if !defined(OS_ANDROID)
 void BindBadgeServiceForServiceWorker(
--- a/chrome/browser/component_updater/file_type_policies_component_installer.cc
+++ b/chrome/browser/component_updater/file_type_policies_component_installer.cc
@@ -20,8 +20,6 @@
 #include "base/task/thread_pool.h"
 #include "base/version.h"
 #include "components/component_updater/component_updater_paths.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
-#include "components/safe_browsing/core/common/features.h"
 
 using component_updater::ComponentUpdateService;
 
@@ -110,7 +108,6 @@ std::string FileTypePoliciesComponentIns
 update_client::InstallerAttributes
 FileTypePoliciesComponentInstallerPolicy::GetInstallerAttributes() const {
   update_client::InstallerAttributes attributes;
-  attributes["tag"] = safe_browsing::GetFileTypePoliciesTag();
   return attributes;
 }
 
--- a/chrome/browser/component_updater/registration.cc
+++ b/chrome/browser/component_updater/registration.cc
@@ -135,7 +135,6 @@ void RegisterComponentsForUpdate(bool is
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 #endif  // BUILDFLAG(ENABLE_NACL) && !defined(OS_ANDROID)
 
-  RegisterSubresourceFilterComponent(cus);
   RegisterFlocComponent(cus,
                         g_browser_process->floc_sorting_lsh_clusters_service());
   RegisterOnDeviceHeadSuggestComponent(
@@ -186,7 +185,6 @@ void RegisterComponentsForUpdate(bool is
   // on chromium build bots, it is always registered here and
   // RegisterSwReporterComponent() has support for running only in official
   // builds or tests.
-  RegisterSwReporterComponent(cus);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   RegisterThirdPartyModuleListComponent(cus);
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -43,13 +43,8 @@
 #include "chrome/browser/download/save_package_file_picker.h"
 #include "chrome/browser/enterprise/connectors/common.h"
 #include "chrome/browser/enterprise/connectors/file_system/rename_handler.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/buildflags.h"
@@ -69,8 +64,6 @@
 #include "components/prefs/pref_member.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/download/download_stats.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
 #include "components/services/quarantine/public/mojom/quarantine.mojom.h"
 #include "components/services/quarantine/quarantine_impl.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -130,7 +123,6 @@ using content::DownloadManager;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadProtectionService;
 using ConnectionType = net::NetworkChangeNotifier::ConnectionType;
 
 namespace {
@@ -867,19 +859,6 @@ ChromeDownloadManagerDelegate::Applicati
   return std::string(chrome::kApplicationClientIDStringForAVScanning);
 }
 
-DownloadProtectionService*
-ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && sb_service->download_protection_service()) {
-    return sb_service->download_protection_service();
-  }
-#endif
-  return nullptr;
-}
-
 void ChromeDownloadManagerDelegate::GetMixedContentStatus(
     download::DownloadItem* download,
     const base::FilePath& virtual_path,
--- a/chrome/browser/download/chrome_download_manager_delegate.h
+++ b/chrome/browser/download/chrome_download_manager_delegate.h
@@ -22,8 +22,6 @@
 #include "chrome/browser/download/download_completion_blocker.h"
 #include "chrome/browser/download/download_target_determiner_delegate.h"
 #include "chrome/browser/download/download_target_info.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -141,25 +139,8 @@ class ChromeDownloadManagerDelegate
 
   DownloadPrefs* download_prefs() { return download_prefs_.get(); }
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  // The state of a safebrowsing check.
-  class SafeBrowsingState : public DownloadCompletionBlocker {
-   public:
-    SafeBrowsingState() = default;
-    ~SafeBrowsingState() override;
-
-    // String pointer used for identifying safebrowing data associated with
-    // a download item.
-    static const char kSafeBrowsingUserDataKey[];
-
-   private:
-    DISALLOW_COPY_AND_ASSIGN(SafeBrowsingState);
-  };
-#endif  // FULL_SAFE_BROWSING
-
   // Callback function after the DownloadProtectionService completes.
-  void CheckClientDownloadDone(uint32_t download_id,
-                               safe_browsing::DownloadCheckResult result);
+  void CheckClientDownloadDone(uint32_t download_id);
 
   base::WeakPtr<ChromeDownloadManagerDelegate> GetWeakPtr();
 
@@ -172,9 +153,6 @@ class ChromeDownloadManagerDelegate
                        download::DownloadItem* item) const;
 
  protected:
-  virtual safe_browsing::DownloadProtectionService*
-      GetDownloadProtectionService();
-
   // Show file picker for |download|.
   virtual void ShowFilePickerForDownload(
       download::DownloadItem* download,
--- a/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate_unittest.cc
@@ -30,7 +30,6 @@
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_target_info.h"
 #include "chrome/browser/download/mixed_content_download_blocking.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
@@ -81,7 +80,6 @@ using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
 using ConnectionType = net::NetworkChangeNotifier::ConnectionType;
-using safe_browsing::DownloadFileType;
 using ::testing::_;
 using ::testing::AnyNumber;
 using ::testing::AtMost;
@@ -200,9 +198,6 @@ class TestChromeDownloadManagerDelegate
                download::DownloadDangerType(DownloadItem*,
                                             const base::FilePath&));
 
-  MOCK_METHOD0(GetDownloadProtectionService,
-               safe_browsing::DownloadProtectionService*());
-
   void RequestConfirmation(
       DownloadItem* item,
       const base::FilePath& path,
@@ -670,8 +665,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
 
-    EXPECT_EQ(DownloadFileType::DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -683,8 +676,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
         .WillRepeatedly(Return(kSafeContentDisposition));
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -696,8 +687,6 @@ TEST_F(ChromeDownloadManagerDelegateTest
         .WillRepeatedly(Return(kModerateContentDisposition));
     DetermineDownloadTargetResult result;
     DetermineDownloadTarget(download_item.get(), &result);
-    EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE,
-              DownloadItemModel(download_item.get()).GetDangerLevel());
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               result.danger_type);
   }
@@ -1327,7 +1316,6 @@ namespace {
 
 struct SafeBrowsingTestParameters {
   download::DownloadDangerType initial_danger_type;
-  DownloadFileType::DangerLevel initial_danger_level;
   safe_browsing::DownloadCheckResult verdict;
   DownloadPrefs::DownloadRestriction download_restriction;
 
@@ -1379,7 +1367,6 @@ void ChromeDownloadManagerDelegateTestWi
 const SafeBrowsingTestParameters kSafeBrowsingTestCases[] = {
     // SAFE verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1387,8 +1374,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1396,8 +1381,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1405,8 +1388,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1414,8 +1395,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a safe file.
     {download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-     DownloadFileType::NOT_DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1423,8 +1402,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // SAFE verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
@@ -1432,8 +1409,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1441,8 +1416,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1450,8 +1423,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a potentially dangerous file not blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1459,8 +1430,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1468,8 +1437,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1477,8 +1444,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST,
@@ -1486,8 +1451,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a potentially dangerous file block by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL,
@@ -1495,8 +1458,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1504,8 +1465,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1514,8 +1473,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, blocked by
     // policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::POTENTIALLY_DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1524,8 +1481,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, not
     // blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::DANGEROUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1534,8 +1489,6 @@ const SafeBrowsingTestParameters kSafeBr
     // POTENTIALLY_UNWANTED verdict for a potentially dangerous file, not
     // blocked by policy.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::ALLOW_ON_USER_GESTURE,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::MALICIOUS_FILES,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1543,7 +1496,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // SAFE verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::SAFE,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1551,7 +1503,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNKNOWN verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNKNOWN,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE,
@@ -1559,7 +1510,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // DANGEROUS verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::DANGEROUS,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT,
@@ -1567,7 +1517,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // UNCOMMON verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS, safe_browsing::DownloadCheckResult::UNCOMMON,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT,
@@ -1575,8 +1524,6 @@ const SafeBrowsingTestParameters kSafeBr
 
     // POTENTIALLY_UNWANTED verdict for a dangerous file.
     {download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
-     DownloadFileType::DANGEROUS,
-     safe_browsing::DownloadCheckResult::POTENTIALLY_UNWANTED,
      DownloadPrefs::DownloadRestriction::NONE,
 
      download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED,
@@ -1600,11 +1547,6 @@ TEST_P(ChromeDownloadManagerDelegateTest
   EXPECT_CALL(*download_item, GetDangerType())
       .WillRepeatedly(Return(kParameters.initial_danger_type));
 
-  if (kParameters.initial_danger_level != DownloadFileType::NOT_DANGEROUS) {
-    DownloadItemModel(download_item.get())
-        .SetDangerLevel(kParameters.initial_danger_level);
-  }
-
   if (kParameters.blocked) {
     EXPECT_CALL(*download_item,
                 OnContentCheckCompleted(
--- a/chrome/browser/download/download_browsertest.cc
+++ b/chrome/browser/download/download_browsertest.cc
@@ -65,7 +65,6 @@
 #include "chrome/browser/profiles/profile_key.h"
 #include "chrome/browser/renderer_context_menu/render_view_context_menu_browsertest_util.h"
 #include "chrome/browser/renderer_context_menu/render_view_context_menu_test_util.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_commands.h"
 #include "chrome/browser/ui/browser_finder.h"
@@ -100,9 +99,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/reputation/core/safety_tip_test_utils.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/safe_browsing_service_interface.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
-#include "components/safe_browsing/core/common/proto/csd.pb.h"
 #include "components/security_state/core/features.h"
 #include "components/security_state/core/security_state.h"
 #include "components/services/quarantine/test_support.h"
@@ -1314,6 +1310,7 @@ class PrerenderDownloadTest : public Dow
 
 namespace {
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 class FakeDownloadProtectionService
     : public safe_browsing::DownloadProtectionService {
  public:
@@ -1386,6 +1383,7 @@ class DownloadTestWithFakeSafeBrowsing :
  protected:
   std::unique_ptr<TestSafeBrowsingServiceFactory> test_safe_browsing_factory_;
 };
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)
 
 class DownloadWakeLockTest : public DownloadTest {
  public:
@@ -5025,8 +5023,6 @@ class DisableSafeBrowsingOnInProgressDow
     EXPECT_EQ(download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT,
               download->GetDangerType());
     EXPECT_FALSE(download->IsDangerous());
-    EXPECT_NE(safe_browsing::DownloadFileType::NOT_DANGEROUS,
-              DownloadItemModel(download).GetDangerLevel());
     return true;
   }
 
@@ -5131,7 +5127,6 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Saf
 IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceDiscardDownload) {
   PrefService* prefs = browser()->profile()->GetPrefs();
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPrefForTests(prefs, true);
 
   // Make a dangerous file.
   embedded_test_server()->ServeFilesFromDirectory(GetTestDataDirectory());
@@ -5152,40 +5147,11 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Fee
   DownloadManagerForBrowser(browser())->GetAllDownloads(&downloads);
   ASSERT_EQ(1u, downloads.size());
   EXPECT_TRUE(downloads[0]->IsDangerous());
-
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
-  // Begin feedback and check that the file is "stolen".
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::DISCARD);
-  std::vector<DownloadItem*> updated_downloads;
-  GetDownloads(browser(), &updated_downloads);
-  ASSERT_TRUE(updated_downloads.empty());
 }
 
 IN_PROC_BROWSER_TEST_F(DownloadTest, FeedbackServiceKeepDownload) {
   PrefService* prefs = browser()->profile()->GetPrefs();
   prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-  safe_browsing::SetExtendedReportingPrefForTests(prefs, true);
 
   // Make a dangerous file.
   embedded_test_server()->ServeFilesFromDirectory(GetTestDataDirectory());
@@ -5212,30 +5178,7 @@ IN_PROC_BROWSER_TEST_F(DownloadTest, Fee
   ASSERT_EQ(1u, downloads.size());
   EXPECT_TRUE(downloads[0]->IsDangerous());
 
-  // Save fake pings for the download.
-  safe_browsing::ClientDownloadReport fake_metadata;
-  fake_metadata.mutable_download_request()->set_url("http://test");
-  fake_metadata.mutable_download_request()->set_length(1);
-  fake_metadata.mutable_download_request()->mutable_digests()->set_sha1("hi");
-  fake_metadata.mutable_download_response()->set_verdict(
-      safe_browsing::ClientDownloadResponse::UNCOMMON);
-  std::string ping_request(
-      fake_metadata.download_request().SerializeAsString());
-  std::string ping_response(
-      fake_metadata.download_response().SerializeAsString());
-  safe_browsing::DownloadFeedbackService::MaybeStorePingsForDownload(
-      safe_browsing::DownloadCheckResult::UNCOMMON, true /* upload_requested */,
-      downloads[0], ping_request, ping_response);
-  ASSERT_TRUE(safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *(downloads[0])));
-
   // Begin feedback and check that file is still there.
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  safe_browsing::DownloadProtectionService* download_protection_service =
-      sb_service->download_protection_service();
-  download_protection_service->MaybeBeginFeedbackForDownload(
-      browser()->profile(), downloads[0], DownloadCommands::KEEP);
   completion_observer->WaitForFinished();
 
   std::vector<DownloadItem*> updated_downloads;
@@ -5270,18 +5213,6 @@ IN_PROC_BROWSER_TEST_F(DownloadTestWithF
   DownloadItemModel model(download);
   DownloadCommands(model.GetWeakPtr()).ExecuteCommand(DownloadCommands::KEEP);
 
-  safe_browsing::ClientSafeBrowsingReportRequest actual_report;
-  actual_report.ParseFromString(
-      test_safe_browsing_factory_->fake_safe_browsing_service()
-          ->serilized_download_report());
-  EXPECT_EQ(safe_browsing::ClientSafeBrowsingReportRequest::
-                DANGEROUS_DOWNLOAD_WARNING,
-            actual_report.type());
-  EXPECT_EQ(safe_browsing::ClientDownloadResponse::UNCOMMON,
-            actual_report.download_verdict());
-  EXPECT_EQ(download_url.spec(), actual_report.url());
-  EXPECT_TRUE(actual_report.did_proceed());
-
   download->Cancel(true);
 }
 
@@ -5308,10 +5239,6 @@ IN_PROC_BROWSER_TEST_F(
   DownloadItemModel model(download);
   DownloadCommands(model.GetWeakPtr())
       .ExecuteCommand(DownloadCommands::DISCARD);
-
-  EXPECT_TRUE(test_safe_browsing_factory_->fake_safe_browsing_service()
-                  ->serilized_download_report()
-                  .empty());
 }
 #endif  // FULL_SAFE_BROWSING
 
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -29,18 +29,12 @@
 #include "chrome/browser/enterprise/connectors/common.h"
 #include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_item_utils.h"
@@ -55,7 +49,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -85,10 +78,6 @@ class DownloadItemModelData : public bas
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
-  // Danger level of the file determined based on the file type and whether
-  // there was a user action associated with the download.
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
-
   // Whether the download is currently being revived.
   bool is_being_revived_;
 
@@ -124,7 +113,6 @@ DownloadItemModelData::DownloadItemModel
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
-      danger_level_(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
 }  // namespace
@@ -378,17 +366,6 @@ void DownloadItemModel::SetShouldPreferO
   data->should_prefer_opening_in_browser_ = preference;
 }
 
-safe_browsing::DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
-  const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
-  return data ? data->danger_level_ : safe_browsing::DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadItemModel::SetDangerLevel(
-    safe_browsing::DownloadFileType::DangerLevel danger_level) {
-  DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
-  data->danger_level_ = danger_level;
-}
-
 download::DownloadItem::MixedContentStatus
 DownloadItemModel::GetMixedContentStatus() const {
   return download_->GetMixedContentStatus();
--- a/chrome/browser/download/download_item_model.h
+++ b/chrome/browser/download/download_item_model.h
@@ -15,7 +15,6 @@
 #include "chrome/browser/download/download_ui_model.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
 
 // Implementation of DownloadUIModel that wrappers around a |DownloadItem*|. As
 // such, the caller is expected to ensure that the |download| passed into the
@@ -52,9 +51,6 @@ class DownloadItemModel : public Downloa
   void SetWasUINotified(bool should_notify) override;
   bool ShouldPreferOpeningInBrowser() const override;
   void SetShouldPreferOpeningInBrowser(bool preference) override;
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const override;
-  void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level) override;
   download::DownloadItem::MixedContentStatus GetMixedContentStatus()
       const override;
   void OpenUsingPlatformHandler() override;
--- a/chrome/browser/download/download_item_model_unittest.cc
+++ b/chrome/browser/download/download_item_model_unittest.cc
@@ -24,7 +24,6 @@
 #include "ui/base/text/bytes_formatting.h"
 
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using ::testing::Mock;
 using ::testing::NiceMock;
 using ::testing::Return;
@@ -448,12 +447,6 @@ TEST_F(DownloadItemModelTest, ShouldShow
 
 TEST_F(DownloadItemModelTest, DangerLevel) {
   SetupDownloadItemDefaults();
-
-  // Default danger level is NOT_DANGEROUS.
-  EXPECT_EQ(DownloadFileType::NOT_DANGEROUS, model().GetDangerLevel());
-
-  model().SetDangerLevel(DownloadFileType::ALLOW_ON_USER_GESTURE);
-  EXPECT_EQ(DownloadFileType::ALLOW_ON_USER_GESTURE, model().GetDangerLevel());
 }
 
 TEST_F(DownloadItemModelTest, HasSupportedImageMimeType) {
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -42,7 +42,6 @@
 #include "components/policy/core/browser/url_blocklist_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/save_page_type.h"
@@ -63,7 +62,6 @@
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DownloadManager;
-using safe_browsing::FileTypePolicies;
 
 namespace {
 
@@ -214,8 +212,6 @@ DownloadPrefs::DownloadPrefs(Profile* pr
   download_path_.Init(prefs::kDownloadDefaultDirectory, prefs);
   save_file_path_.Init(prefs::kSaveFileDefaultDirectory, prefs);
   save_file_type_.Init(prefs::kSaveFileType, prefs);
-  safebrowsing_for_trusted_sources_enabled_.Init(
-      prefs::kSafeBrowsingForTrustedSourcesEnabled, prefs);
   download_restriction_.Init(prefs::kDownloadRestrictions, prefs);
 
   pref_change_registrar_.Add(
@@ -279,8 +275,6 @@ void DownloadPrefs::RegisterProfilePrefs
   registry->RegisterIntegerPref(prefs::kSaveFileType,
                                 content::SAVE_PAGE_TYPE_AS_COMPLETE_HTML);
   registry->RegisterIntegerPref(prefs::kDownloadRestrictions, 0);
-  registry->RegisterBooleanPref(prefs::kSafeBrowsingForTrustedSourcesEnabled,
-                                true);
 
   const base::FilePath& default_download_path = GetDefaultDownloadDirectory();
   registry->RegisterFilePathPref(prefs::kDownloadDefaultDirectory,
--- a/chrome/browser/download/download_prefs.h
+++ b/chrome/browser/download/download_prefs.h
@@ -77,9 +77,6 @@ class DownloadPrefs {
   DownloadRestriction download_restriction() const {
     return static_cast<DownloadRestriction>(*download_restriction_);
   }
-  bool safebrowsing_for_trusted_sources_enabled() const {
-    return *safebrowsing_for_trusted_sources_enabled_;
-  }
 
   // Returns true if the prompt_for_download preference has been set and the
   // download location is not managed (which means the user shouldn't be able
@@ -157,7 +154,6 @@ class DownloadPrefs {
   FilePathPrefMember save_file_path_;
   IntegerPrefMember save_file_type_;
   IntegerPrefMember download_restriction_;
-  BooleanPrefMember safebrowsing_for_trusted_sources_enabled_;
 
   PrefChangeRegistrar pref_change_registrar_;
 
--- a/chrome/browser/download/download_prefs_unittest.cc
+++ b/chrome/browser/download/download_prefs_unittest.cc
@@ -14,7 +14,6 @@
 #include "components/download/public/common/download_features.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
 #include "components/sync_preferences/testing_pref_service_syncable.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
@@ -34,20 +33,6 @@
 #include "components/account_id/account_id.h"
 #endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
 
-using safe_browsing::FileTypePolicies;
-
-namespace {
-
-TEST(DownloadPrefsTest, Prerequisites) {
-  // Most of the tests below are based on the assumption that .swf files are not
-  // allowed to open automatically, and that .txt files are allowed. If this
-  // assumption changes, then we need to update the tests to match.
-  ASSERT_FALSE(FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-      base::FilePath(FILE_PATH_LITERAL("a.swf"))));
-  ASSERT_TRUE(FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-      base::FilePath(FILE_PATH_LITERAL("a.txt"))));
-}
-
 // Verifies prefs are registered correctly.
 TEST(DownloadPrefsTest, RegisterPrefs) {
   content::BrowserTaskEnvironment task_environment_;
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -23,15 +23,11 @@
 #include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/history/history_service_factory.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_metrics_collector_factory.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/history/core/browser/history_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/browser/download/download_stats.h"
-#include "components/safe_browsing/content/browser/safe_browsing_metrics_collector.h"
-#include "components/safe_browsing/content/common/file_type_policies.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -65,7 +61,6 @@
 using content::BrowserThread;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -106,7 +101,6 @@ DownloadTargetDeterminer::DownloadTarget
       create_target_directory_(false),
       conflict_action_(conflict_action),
       danger_type_(download->GetDangerType()),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       virtual_path_(initial_virtual_path),
       is_filetype_handled_safely_(false),
 #if defined(OS_ANDROID)
@@ -829,37 +823,6 @@ DownloadTargetDeterminer::Result
     return CONTINUE;
   }
 
-  // First determine the danger level assuming that the user doesn't have any
-  // prior visits to the referrer recoreded in history. The resulting danger
-  // level would be ALLOW_ON_USER_GESTURE if the level depends on the visit
-  // history. In the latter case, we can query the history DB to determine if
-  // there were prior requests and determine the danger level again once the
-  // result is available.
-  danger_level_ = GetDangerLevel(NO_VISITS_TO_REFERRER);
-
-  if (danger_level_ == DownloadFileType::NOT_DANGEROUS)
-    return CONTINUE;
-
-  if (danger_level_ == DownloadFileType::ALLOW_ON_USER_GESTURE) {
-    // HistoryServiceFactory redirects incognito profiles to on-record profiles.
-    // There's no history for on-record profiles in unit_tests.
-    history::HistoryService* history_service =
-        HistoryServiceFactory::GetForProfile(
-            GetProfile(), ServiceAccessType::EXPLICIT_ACCESS);
-
-    if (history_service && download_->GetReferrerUrl().is_valid()) {
-      history_service->GetVisibleVisitCountToHost(
-          download_->GetReferrerUrl(),
-          base::BindOnce(
-              &VisitCountsToVisitedBefore,
-              base::BindOnce(
-                  &DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone,
-                  weak_ptr_factory_.GetWeakPtr())),
-          &history_tracker_);
-      return QUIT_DOLOOP;
-    }
-  }
-
   // If the danger level doesn't depend on having visited the refererrer URL or
   // if original profile doesn't have a HistoryService or the referrer url is
   // invalid, then assume the referrer has not been visited before.
@@ -872,18 +835,6 @@ void DownloadTargetDeterminer::CheckVisi
     bool visited_referrer_before) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK_EQ(STATE_DETERMINE_INTERMEDIATE_PATH, next_state_);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::RecordDownloadFileTypeAttributes(
-      safe_browsing::FileTypePolicies::GetInstance()->GetFileDangerLevel(
-          virtual_path_.BaseName()),
-      download_->HasUserGesture(), visited_referrer_before,
-      GetLastDownloadBypassTimestamp());
-#endif // BUILDFLAG(FULL_SAFE_BROWSING)
-  danger_level_ = GetDangerLevel(
-      visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
-  if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
-      danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   DoLoop();
 }
 
@@ -983,7 +934,6 @@ void DownloadTargetDeterminer::ScheduleC
             << " Intermediate:" << intermediate_path_.AsUTF8Unsafe()
             << " Confirmation reason:" << static_cast<int>(confirmation_reason_)
             << " Danger type:" << danger_type_
-            << " Danger level:" << danger_level_
             << " Result:" << static_cast<int>(result);
   std::unique_ptr<DownloadTargetInfo> target_info(new DownloadTargetInfo);
 
@@ -995,7 +945,6 @@ void DownloadTargetDeterminer::ScheduleC
            ? DownloadItem::TARGET_DISPOSITION_PROMPT
            : DownloadItem::TARGET_DISPOSITION_OVERWRITE);
   target_info->danger_type = danger_type_;
-  target_info->danger_level = danger_level_;
   target_info->intermediate_path = intermediate_path_;
   target_info->mime_type = mime_type_;
   target_info->is_filetype_handled_safely = is_filetype_handled_safely_;
@@ -1086,33 +1035,6 @@ bool DownloadTargetDeterminer::HasPrompt
                                 DownloadItem::TARGET_DISPOSITION_PROMPT);
 }
 
-DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
-    PriorVisitsToReferrer visits) const {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  // If the user has has been prompted or will be, assume that the user has
-  // approved the download. A programmatic download is considered safe unless it
-  // contains malware.
-  if (HasPromptedForPath() ||
-      confirmation_reason_ != DownloadConfirmationReason::NONE ||
-      !download_->GetForcedFilePath().empty())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  // User-initiated extension downloads from pref-whitelisted sources are not
-  // considered dangerous.
-  if (download_->HasUserGesture() &&
-      download_crx_util::IsTrustedExtensionDownload(GetProfile(), *download_)) {
-    return DownloadFileType::NOT_DANGEROUS;
-  }
-
-  // Anything the user has marked auto-open is OK if it's user-initiated.
-  if (download_prefs_->IsAutoOpenEnabled(download_->GetURL(), virtual_path_) &&
-      download_->HasUserGesture())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
 absl::optional<base::Time>
 DownloadTargetDeterminer::GetLastDownloadBypassTimestamp() const {
 #if BUILDFLAG(FULL_SAFE_BROWSING)
--- a/chrome/browser/download/download_target_determiner.h
+++ b/chrome/browser/download/download_target_determiner.h
@@ -20,7 +20,6 @@
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
 #include "content/public/browser/download_manager_delegate.h"
 #include "ppapi/buildflags/buildflags.h"
 
@@ -317,16 +316,6 @@ class DownloadTargetDeterminer : public
   // operation.
   bool HasPromptedForPath() const;
 
-  // Returns true if this download should show the "dangerous file" warning.
-  // Various factors are considered, such as the type of the file, whether a
-  // user action initiated the download, and whether the user has explicitly
-  // marked the file type as "auto open". Protected virtual for testing.
-  //
-  // If |require_explicit_consent| is non-null then the pointed bool will be set
-  // to true if the download requires explicit user consent.
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel(
-      PriorVisitsToReferrer visits) const;
-
   // Returns the timestamp of the last download bypass.
   absl::optional<base::Time> GetLastDownloadBypassTimestamp() const;
 
@@ -345,7 +334,6 @@ class DownloadTargetDeterminer : public
   download::DownloadPathReservationTracker::FilenameConflictAction
       conflict_action_;
   download::DownloadDangerType danger_type_;
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
   base::FilePath virtual_path_;
   base::FilePath local_path_;
   base::FilePath intermediate_path_;
--- a/chrome/browser/download/download_target_info.cc
+++ b/chrome/browser/download/download_target_info.cc
@@ -4,12 +4,9 @@
 
 #include "chrome/browser/download/download_target_info.h"
 
-#include "components/safe_browsing/content/common/file_type_policies.h"
-
 DownloadTargetInfo::DownloadTargetInfo()
     : target_disposition(download::DownloadItem::TARGET_DISPOSITION_OVERWRITE),
       danger_type(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS),
-      danger_level(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_filetype_handled_safely(false),
       result(download::DOWNLOAD_INTERRUPT_REASON_NONE),
       mixed_content_status(
--- a/chrome/browser/download/download_target_info.h
+++ b/chrome/browser/download/download_target_info.h
@@ -12,7 +12,6 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_schedule.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
 struct DownloadTargetInfo {
@@ -34,32 +33,6 @@ struct DownloadTargetInfo {
   // Danger type of the download.
   download::DownloadDangerType danger_type;
 
-  // The danger type of the download could be set to MAYBE_DANGEROUS_CONTENT if
-  // the file type is handled by SafeBrowsing. However, if the SafeBrowsing
-  // service is unable to verify whether the file is safe or not, we are on our
-  // own. The value of |danger_level| indicates whether the download should be
-  // considered dangerous if SafeBrowsing returns an unknown verdict.
-  //
-  // Note that some downloads (e.g. "Save link as" on a link to a binary) would
-  // not be considered 'Dangerous' even if SafeBrowsing came back with an
-  // unknown verdict. So we can't always show a warning when SafeBrowsing fails.
-  //
-  // The value of |danger_level| should be interpreted as follows:
-  //
-  //   NOT_DANGEROUS : Unless flagged by SafeBrowsing, the file should be
-  //       considered safe.
-  //
-  //   ALLOW_ON_USER_GESTURE : If SafeBrowsing claims the file is safe, then the
-  //       file is safe. An UNKOWN verdict results in the file being marked as
-  //       DANGEROUS_FILE.
-  //
-  //   DANGEROUS : This type of file shouldn't be allowed to download witout any
-  //       user action. Hence, if SafeBrowsing marks the file as SAFE, or
-  //       UNKONWN, the file will still be conisdered a DANGEROUS_FILE. However,
-  //       SafeBrowsing may flag the file as being malicious, in which case the
-  //       malicious classification should take precedence.
-  safe_browsing::DownloadFileType::DangerLevel danger_level;
-
   // Suggested intermediate path. The downloaded bytes should be written to this
   // path until all the bytes are available and the user has accepted a
   // dangerous download. At that point, the download can be renamed to
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -11,8 +11,6 @@
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
@@ -36,7 +34,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using offline_items_collection::FailState;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -233,7 +230,7 @@ std::u16string DownloadUIModel::GetWarni
   *offset = std::string::npos;
   switch (GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
-      return l10n_util::GetStringUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_URL);
+      break;
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE:
       return IsExtensionDownload()
                  ? l10n_util::GetStringUTF16(
@@ -242,30 +239,9 @@ std::u16string DownloadUIModel::GetWarni
                                               filename, offset);
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
-      return l10n_util::GetStringFUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT,
-                                        filename, offset);
-    case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_ACCOUNT_COMPROMISE: {
-      return base::FeatureList::IsEnabled(
-                 safe_browsing::kSafeBrowsingCTDownloadWarning)
-                 ? l10n_util::GetStringFUTF16(
-                       IDS_PROMPT_DANGEROUS_DOWNLOAD_ACCOUNT_COMPROMISE,
-                       filename, offset)
-                 : l10n_util::GetStringFUTF16(
-                       IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT, filename, offset);
-    }
+    case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_ACCOUNT_COMPROMISE:
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool request_ap_verdicts = false;
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-      request_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
-#endif
-      return l10n_util::GetStringFUTF16(
-          request_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
-          filename, offset);
+        break;
     }
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED:
       return l10n_util::GetStringFUTF16(IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS,
@@ -408,13 +384,6 @@ bool DownloadUIModel::ShouldPreferOpenin
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
-DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadUIModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {}
-
 download::DownloadItem::MixedContentStatus
 DownloadUIModel::GetMixedContentStatus() const {
   return download::DownloadItem::MixedContentStatus::UNKNOWN;
--- a/chrome/browser/download/download_ui_model.h
+++ b/chrome/browser/download/download_ui_model.h
@@ -19,7 +19,6 @@
 #include "components/download/public/common/download_item.h"
 #include "components/offline_items_collection/core/offline_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/common/proto/download_file_types.pb.h"
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/download/download_commands.h"
@@ -179,15 +178,6 @@ class DownloadUIModel {
   // Change what's returned by ShouldPreferOpeningInBrowser to |preference|.
   virtual void SetShouldPreferOpeningInBrowser(bool preference);
 
-  // Return the danger level determined during download target determination.
-  // The value returned here is independent of the danger level as determined by
-  // the Safe Browsing.
-  virtual safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const;
-
-  // Change what's returned by GetDangerLevel().
-  virtual void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level);
-
   // Return the mixed content status determined during download target
   // determination.
   virtual download::DownloadItem::MixedContentStatus GetMixedContentStatus()
--- a/chrome/browser/download/notification/download_item_notification.cc
+++ b/chrome/browser/download/notification/download_item_notification.cc
@@ -32,8 +32,6 @@
 #include "chrome/browser/notifications/notification_display_service.h"
 #include "chrome/browser/notifications/notification_display_service_factory.h"
 #include "chrome/browser/notifications/notification_handler.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/url_constants.h"
@@ -907,14 +905,8 @@ std::u16string DownloadItemNotification:
                        IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT, elided_filename);
     }
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool requests_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
       return l10n_util::GetStringFUTF16(
-          requests_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
+          IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
           elided_filename);
     }
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED: {
--- a/chrome/browser/download/notification/download_notification_browsertest.cc
+++ b/chrome/browser/download/notification/download_notification_browsertest.cc
@@ -94,13 +94,6 @@ class TestChromeDownloadManagerDelegate
   // Return if  the download is opened.
   bool opened() const { return opened_; }
 
- protected:
-  // Disable DownloadProtectionService in order to disable content checking.
-  safe_browsing::DownloadProtectionService* GetDownloadProtectionService()
-      override {
-    return nullptr;
-  }
-
  private:
   bool opened_;
 };
--- a/chrome/browser/download/save_package_file_picker.cc
+++ b/chrome/browser/download/save_package_file_picker.cc
@@ -46,7 +46,6 @@ namespace {
 bool g_should_prompt_for_filename = true;
 
 void OnSavePackageDownloadCreated(download::DownloadItem* download) {
-  ChromeDownloadManagerDelegate::DisableSafeBrowsing(download);
 }
 
 // Adds "Webpage, HTML Only" type to FileTypeInfo.
--- a/chrome/browser/enterprise/connectors/reporting/reporting_service_settings.cc
+++ b/chrome/browser/enterprise/connectors/reporting/reporting_service_settings.cc
@@ -7,7 +7,6 @@
 #include "base/command_line.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/enterprise/connectors/service_provider_config.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
 #include "chrome/browser/policy/chrome_browser_policy_connector.h"
 #include "components/policy/core/browser/url_util.h"
 
@@ -29,8 +28,6 @@ absl::optional<GURL> GetUrlOverride() {
     GURL url = GURL(cmd->GetSwitchValueASCII(kReportingConnectorUrlFlag));
     if (url.is_valid())
       return url;
-    else
-      VLOG(1) << "--reporting-connector-url is set to an invalid URL";
   }
 
   return absl::nullopt;
@@ -61,19 +58,6 @@ ReportingServiceSettings::ReportingServi
          enabled_event_name_list_value->GetList()) {
       if (enabled_event_name_value.is_string())
         enabled_event_names_.insert(enabled_event_name_value.GetString());
-      else
-        DVLOG(1) << "Enabled event name list contains a non string value!";
-    }
-  } else {
-    // When the list of enabled event names is not set, we assume all events are
-    // enabled. This is to support the feature of selecting the "All always on"
-    // option in the policy UI, which means to always enable all events, even
-    // when new events may be added in the future. And this is also to support
-    // existing customer policies that were created before we introduced the
-    // concept of enabling/disabling events.
-    for (auto* event_name :
-         extensions::SafeBrowsingPrivateEventRouter::kAllEvents) {
-      enabled_event_names_.insert(event_name);
     }
   }
 }
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -309,14 +309,6 @@ static_library("extensions") {
     "api/resources_private/resources_private_api.h",
     "api/runtime/chrome_runtime_api_delegate.cc",
     "api/runtime/chrome_runtime_api_delegate.h",
-    "api/safe_browsing_private/safe_browsing_private_api.cc",
-    "api/safe_browsing_private/safe_browsing_private_api.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.h",
-    "api/safe_browsing_private/safe_browsing_util.cc",
-    "api/safe_browsing_private/safe_browsing_util.h",
     "api/scripting/scripting_api.cc",
     "api/scripting/scripting_api.h",
     "api/search/search_api.cc",
@@ -747,9 +739,6 @@ static_library("extensions") {
 
     # TODO(crbug.com/1065748): Remove this circular dependency.
     "//chrome/browser/web_applications/extensions",
-
-    # TODO(crbug/925153): Remove this circular dependency.
-    "//chrome/browser/safe_browsing",
   ]
 
   # Since browser and browser_extensions actually depend on each other,
@@ -762,8 +751,6 @@ static_library("extensions") {
     "//chrome/common",
     "//chrome/common/extensions/api",
     "//components/omnibox/browser",
-    "//components/safe_browsing/core/browser/db:util",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/signin/core/browser",
     "//components/translate/content/browser",
     "//content/public/browser",
@@ -795,17 +782,13 @@ static_library("extensions") {
     "//chrome/browser/profiles:profile",
     "//chrome/browser/resource_coordinator:intervention_policy_database_proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
-    "//chrome/browser/safe_browsing",
-    "//chrome/browser/safe_browsing:metrics_collector",
     "//chrome/browser/web_applications",
-    "//components/safe_browsing/content/browser",
     "//components/site_engagement/core/mojom:mojo_bindings",
     "//components/webapps/browser",
 
     # TODO(crbug.com/1065748): Remove this dependency:
     "//chrome/browser/web_applications/extensions",
     "//chrome/common/extensions/api:extensions_features",
-    "//chrome/common/safe_browsing:proto",
     "//chrome/services/file_util/public/mojom:mojom",
     "//chrome/services/removable_storage_writer/public/mojom",
     "//components/autofill/content/browser",
@@ -858,11 +841,6 @@ static_library("extensions") {
     "//components/proxy_config",
     "//components/resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/browser/web_ui:web_ui",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/search_engines",
     "//components/services/app_service/public/mojom",
     "//components/services/patch/content",
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
@@ -32,9 +32,6 @@
 #include "chrome/browser/extensions/install_tracker.h"
 #include "chrome/browser/extensions/scoped_active_install.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_metrics_collector_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/ui/app_list/app_list_util.h"
 #include "chrome/browser/ui/browser_dialogs.h"
@@ -70,8 +67,6 @@
 #include "chrome/browser/supervised_user/supervised_user_service_factory.h"
 #endif  // BUILDFLAG(ENABLE_SUPERVISED_USERS)
 
-using safe_browsing::SafeBrowsingNavigationObserverManager;
-
 namespace extensions {
 
 namespace BeginInstallWithManifest3 =
--- a/chrome/browser/extensions/blocklist.cc
+++ b/chrome/browser/extensions/blocklist.cc
@@ -19,143 +19,16 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/extensions/blocklist_factory.h"
 #include "chrome/browser/extensions/blocklist_state_fetcher.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/browser/db/util.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_prefs.h"
 
 using content::BrowserThread;
-using safe_browsing::SafeBrowsingDatabaseManager;
 
 namespace extensions {
 
-namespace {
-
-// The safe browsing database manager to use. Make this a global/static variable
-// rather than a member of Blocklist because Blocklist accesses the real
-// database manager before it has a chance to get a fake one.
-class LazySafeBrowsingDatabaseManager {
- public:
-  LazySafeBrowsingDatabaseManager() {
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      instance_ =
-          g_browser_process->safe_browsing_service()->database_manager();
-    }
-#endif
-  }
-
-  scoped_refptr<SafeBrowsingDatabaseManager> get() { return instance_; }
-
-  void set(scoped_refptr<SafeBrowsingDatabaseManager> instance) {
-    instance_ = instance;
-    database_changed_callback_list_.Notify();
-  }
-
-  base::CallbackListSubscription RegisterDatabaseChangedCallback(
-      const base::RepeatingClosure& cb) {
-    return database_changed_callback_list_.Add(cb);
-  }
-
- private:
-  scoped_refptr<SafeBrowsingDatabaseManager> instance_;
-  base::RepeatingClosureList database_changed_callback_list_;
-};
-
-static base::LazyInstance<LazySafeBrowsingDatabaseManager>::DestructorAtExit
-    g_database_manager = LAZY_INSTANCE_INITIALIZER;
-
-// Implementation of SafeBrowsingDatabaseManager::Client, the class which is
-// called back from safebrowsing queries.
-//
-// Constructed on any thread but lives on the IO from then on.
-class SafeBrowsingClientImpl
-    : public SafeBrowsingDatabaseManager::Client,
-      public base::RefCountedThreadSafe<SafeBrowsingClientImpl> {
- public:
-  using OnResultCallback =
-      base::OnceCallback<void(const std::set<std::string>&)>;
-
-  // Constructs a client to query the database manager for |extension_ids| and
-  // run |callback| with the IDs of those which have been blocklisted.
-  static void Start(const std::set<std::string>& extension_ids,
-                    OnResultCallback callback) {
-    auto safe_browsing_client = base::WrapRefCounted(
-        new SafeBrowsingClientImpl(extension_ids, std::move(callback)));
-    content::GetIOThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(&SafeBrowsingClientImpl::StartCheck,
-                       safe_browsing_client, g_database_manager.Get().get(),
-                       extension_ids));
-  }
-
- private:
-  friend class base::RefCountedThreadSafe<SafeBrowsingClientImpl>;
-
-  SafeBrowsingClientImpl(const std::set<std::string>& extension_ids,
-                         OnResultCallback callback)
-      : callback_task_runner_(base::ThreadTaskRunnerHandle::Get()),
-        callback_(std::move(callback)) {}
-
-  ~SafeBrowsingClientImpl() override {}
-
-  // Pass |database_manager| as a parameter to avoid touching
-  // SafeBrowsingService on the IO thread.
-  void StartCheck(scoped_refptr<SafeBrowsingDatabaseManager> database_manager,
-                  const std::set<std::string>& extension_ids) {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    if (database_manager->CheckExtensionIDs(extension_ids, this)) {
-      // Definitely not blocklisted. Callback immediately.
-      callback_task_runner_->PostTask(
-          FROM_HERE,
-          base::BindOnce(std::move(callback_), std::set<std::string>()));
-      return;
-    }
-    // Something might be blocklisted, response will come in
-    // OnCheckExtensionsResult.
-    AddRef();  // Balanced in OnCheckExtensionsResult
-  }
-
-  void OnCheckExtensionsResult(const std::set<std::string>& hits) override {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    callback_task_runner_->PostTask(FROM_HERE,
-                                    base::BindOnce(std::move(callback_), hits));
-    Release();  // Balanced in StartCheck.
-  }
-
-  scoped_refptr<base::SingleThreadTaskRunner> callback_task_runner_;
-  OnResultCallback callback_;
-
-  DISALLOW_COPY_AND_ASSIGN(SafeBrowsingClientImpl);
-};
-
-void CheckOneExtensionState(Blocklist::IsBlocklistedCallback callback,
-                            const Blocklist::BlocklistStateMap& state_map) {
-  std::move(callback).Run(state_map.empty() ? NOT_BLOCKLISTED
-                                            : state_map.begin()->second);
-}
-
-void GetMalwareFromBlocklistStateMap(
-    Blocklist::GetMalwareIDsCallback callback,
-    const Blocklist::BlocklistStateMap& state_map) {
-  std::set<std::string> malware;
-  for (const auto& state_pair : state_map) {
-    // TODO(oleg): UNKNOWN is treated as MALWARE for backwards compatibility.
-    // In future GetMalwareIDs will be removed and the caller will have to
-    // deal with BLOCKLISTED_UNKNOWN state returned from GetBlocklistedIDs.
-    if (state_pair.second == BLOCKLISTED_MALWARE ||
-        state_pair.second == BLOCKLISTED_UNKNOWN) {
-      malware.insert(state_pair.first);
-    }
-  }
-  std::move(callback).Run(malware);
-}
-
-}  // namespace
-
 Blocklist::Observer::Observer(Blocklist* blocklist) : blocklist_(blocklist) {
   blocklist_->AddObserver(this);
 }
@@ -164,24 +37,7 @@ Blocklist::Observer::~Observer() {
   blocklist_->RemoveObserver(this);
 }
 
-Blocklist::ScopedDatabaseManagerForTest::ScopedDatabaseManagerForTest(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager)
-    : original_(GetDatabaseManager()) {
-  SetDatabaseManager(database_manager);
-}
-
-Blocklist::ScopedDatabaseManagerForTest::~ScopedDatabaseManagerForTest() {
-  SetDatabaseManager(original_);
-}
-
 Blocklist::Blocklist(ExtensionPrefs* prefs) {
-  auto& lazy_database_manager = g_database_manager.Get();
-  // Using base::Unretained is safe because when this object goes away, the
-  // subscription will automatically be destroyed.
-  database_changed_subscription_ =
-      lazy_database_manager.RegisterDatabaseChangedCallback(base::BindRepeating(
-          &Blocklist::ObserveNewDatabase, base::Unretained(this)));
-
   ObserveNewDatabase();
 }
 
@@ -196,33 +52,21 @@ void Blocklist::GetBlocklistedIDs(const
                                   GetBlocklistedIDsCallback callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
-  if (ids.empty() || !GetDatabaseManager().get()) {
+  if (ids.empty()) {
     base::ThreadTaskRunnerHandle::Get()->PostTask(
         FROM_HERE, base::BindOnce(std::move(callback), BlocklistStateMap()));
     return;
   }
-
-  // Constructing the SafeBrowsingClientImpl begins the process of asking
-  // safebrowsing for the blocklisted extensions. The set of blocklisted
-  // extensions returned by SafeBrowsing will then be passed to
-  // GetBlocklistStateIDs to get the particular BlocklistState for each id.
-  SafeBrowsingClientImpl::Start(
-      ids, base::BindOnce(&Blocklist::GetBlocklistStateForIDs, AsWeakPtr(),
-                          std::move(callback)));
 }
 
 void Blocklist::GetMalwareIDs(const std::set<std::string>& ids,
                               GetMalwareIDsCallback callback) {
-  GetBlocklistedIDs(ids, base::BindOnce(&GetMalwareFromBlocklistStateMap,
-                                        std::move(callback)));
 }
 
 void Blocklist::IsBlocklisted(const std::string& extension_id,
                               IsBlocklistedCallback callback) {
   std::set<std::string> check;
   check.insert(extension_id);
-  GetBlocklistedIDs(
-      check, base::BindOnce(&CheckOneExtensionState, std::move(callback)));
 }
 
 void Blocklist::GetBlocklistStateForIDs(
@@ -344,29 +188,8 @@ void Blocklist::RemoveObserver(Observer*
   observers_.RemoveObserver(observer);
 }
 
-// static
-void Blocklist::SetDatabaseManager(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager) {
-  g_database_manager.Get().set(database_manager);
-}
-
-// static
-scoped_refptr<SafeBrowsingDatabaseManager> Blocklist::GetDatabaseManager() {
-  return g_database_manager.Get().get();
-}
-
 void Blocklist::ObserveNewDatabase() {
-  auto database_manager = GetDatabaseManager();
-  if (database_manager.get()) {
-    // Using base::Unretained is safe because when this object goes away, the
-    // subscription from the callback list will automatically be destroyed.
-    database_updated_subscription_ =
-        database_manager.get()->RegisterDatabaseUpdatedCallback(
-            base::BindRepeating(&Blocklist::NotifyObservers,
-                                base::Unretained(this)));
-  } else {
     database_updated_subscription_ = {};
-  }
 }
 
 void Blocklist::NotifyObservers() {
--- a/chrome/browser/extensions/blocklist.h
+++ b/chrome/browser/extensions/blocklist.h
@@ -18,7 +18,6 @@
 #include "base/memory/weak_ptr.h"
 #include "base/observer_list.h"
 #include "components/keyed_service/core/keyed_service.h"
-#include "components/safe_browsing/core/browser/db/database_manager.h"
 #include "extensions/browser/blocklist_state.h"
 
 namespace content {
@@ -47,20 +46,6 @@ class Blocklist : public KeyedService, p
     Blocklist* blocklist_;
   };
 
-  class ScopedDatabaseManagerForTest {
-   public:
-    explicit ScopedDatabaseManagerForTest(
-        scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-            database_manager);
-
-    ~ScopedDatabaseManagerForTest();
-
-   private:
-    scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager> original_;
-
-    DISALLOW_COPY_AND_ASSIGN(ScopedDatabaseManagerForTest);
-  };
-
   using BlocklistStateMap = std::map<std::string, BlocklistState>;
 
   using GetBlocklistedIDsCallback =
@@ -119,13 +104,6 @@ class Blocklist : public KeyedService, p
   void RemoveObserver(Observer* observer);
 
  private:
-  // Use via ScopedDatabaseManagerForTest.
-  static void SetDatabaseManager(
-      scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-          database_manager);
-  static scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-  GetDatabaseManager();
-
   void ObserveNewDatabase();
 
   void NotifyObservers();
--- a/chrome/browser/extensions/blocklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blocklist_state_fetcher.cc
@@ -8,10 +8,6 @@
 #include "base/containers/contains.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
-#include "components/safe_browsing/core/browser/db/v4_protocol_manager_util.h"
-#include "components/safe_browsing/core/common/features.h"
 #include "content/public/browser/browser_thread.h"
 #include "net/base/escape.h"
 #include "net/traffic_annotation/network_traffic_annotation.h"
@@ -40,60 +36,6 @@ void BlocklistStateFetcher::Request(cons
 
 void BlocklistStateFetcher::SendRequest(const std::string& id) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  ClientCRXListInfoRequest request;
-  request.set_id(id);
-  std::string request_str;
-  request.SerializeToString(&request_str);
-
-  GURL request_url = GURL();
-  net::NetworkTrafficAnnotationTag traffic_annotation =
-      net::DefineNetworkTrafficAnnotation("extension_blacklist", R"(
-        semantics {
-          sender: "Extension Blacklist"
-          description:
-            "Chromium protects the users from malicious extensions by checking "
-            "extensions that are being installed or have been installed "
-            "against a list of known malwares. Chromium sends the identifiers "
-            "of extensions to Google and Google responds with whether it "
-            "believes each extension is malware or not. Only extensions that "
-            "match the safe browsing blacklist can trigger this request."
-          trigger:
-            "When extensions are being installed and at startup when existing "
-            "extensions are scanned."
-          data: "The identifier of the installed extension."
-          destination: GOOGLE_OWNED_SERVICE
-        }
-        policy {
-          cookies_allowed: YES
-          cookies_store: "Safe Browsing cookies store"
-          setting:
-            "Users can enable or disable this feature by toggling 'Protect you "
-            "and your device from dangerous sites' in Chromium settings under "
-            "Privacy. This feature is enabled by default."
-          chrome_policy {
-            SafeBrowsingEnabled {
-              policy_options {mode: MANDATORY}
-              SafeBrowsingEnabled: false
-            }
-          }
-        })");
-  auto resource_request = std::make_unique<network::ResourceRequest>();
-  resource_request->url = request_url;
-  resource_request->method = "POST";
-  if (base::FeatureList::IsEnabled(safe_browsing::kSafeBrowsingRemoveCookies)) {
-    resource_request->credentials_mode = network::mojom::CredentialsMode::kOmit;
-  }
-  std::unique_ptr<network::SimpleURLLoader> fetcher_ptr =
-      network::SimpleURLLoader::Create(std::move(resource_request),
-                                       traffic_annotation);
-  auto* fetcher = fetcher_ptr.get();
-  fetcher->AttachStringForUpload(request_str, "application/octet-stream");
-  requests_[fetcher] = {std::move(fetcher_ptr), id};
-  fetcher->DownloadToStringOfUnboundedSizeUntilCrashAndDie(
-      url_loader_factory_.get(),
-      base::BindOnce(&BlocklistStateFetcher::OnURLLoaderComplete,
-                     base::Unretained(this), fetcher));
 }
 
 void BlocklistStateFetcher::OnURLLoaderComplete(
@@ -131,12 +73,7 @@ void BlocklistStateFetcher::OnURLLoaderC
 
   BlocklistState state;
   if (net_error == net::OK && response_code == 200) {
-    ClientCRXListInfoResponse response;
-    if (response.ParseFromString(response_body)) {
-      state = static_cast<BlocklistState>(response.verdict());
-    } else {
-      state = BLOCKLISTED_UNKNOWN;
-    }
+    state = BLOCKLISTED_UNKNOWN;
   } else {
     if (net_error != net::OK) {
       VLOG(1) << "Blocklist request for: " << id
--- a/chrome/browser/extensions/blocklist_state_fetcher.h
+++ b/chrome/browser/extensions/blocklist_state_fetcher.h
@@ -6,6 +6,7 @@
 #define CHROME_BROWSER_EXTENSIONS_BLOCKLIST_STATE_FETCHER_H_
 
 #include <algorithm>
+#include <map>
 #include <memory>
 #include <set>
 #include <string>
@@ -13,8 +14,8 @@
 #include "base/callback.h"
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
-#include "components/safe_browsing/core/browser/db/util.h"
 #include "extensions/browser/blocklist_state.h"
+#include "url/gurl.h"
 
 namespace network {
 class SharedURLLoaderFactory;
--- a/chrome/browser/extensions/blocklist_state_fetcher_unittest.cc
+++ b/chrome/browser/extensions/blocklist_state_fetcher_unittest.cc
@@ -7,7 +7,6 @@
 #include "base/bind.h"
 #include "base/run_loop.h"
 #include "chrome/browser/extensions/test_blocklist_state_fetcher.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
 #include "content/public/test/browser_task_environment.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
--- a/chrome/browser/extensions/browser_context_keyed_service_factories.cc
+++ b/chrome/browser/extensions/browser_context_keyed_service_factories.cc
@@ -114,7 +114,6 @@ void EnsureBrowserContextKeyedServiceFac
 #endif
   extensions::PreferenceAPI::GetFactoryInstance();
   extensions::ProcessesAPI::GetFactoryInstance();
-  extensions::SafeBrowsingPrivateEventRouterFactory::GetInstance();
   extensions::SessionsAPI::GetFactoryInstance();
   extensions::SettingsPrivateEventRouterFactory::GetInstance();
   extensions::SettingsOverridesAPI::GetFactoryInstance();
--- a/chrome/browser/extensions/crx_installer.cc
+++ b/chrome/browser/extensions/crx_installer.cc
@@ -665,12 +665,9 @@ void CrxInstaller::CheckInstall() {
 
   policy_check_ = std::make_unique<PolicyCheck>(profile_, extension());
   requirements_check_ = std::make_unique<RequirementsChecker>(extension());
-  blocklist_check_ =
-      std::make_unique<BlocklistCheck>(Blocklist::Get(profile_), extension_);
 
   check_group_->AddCheck(policy_check_.get());
   check_group_->AddCheck(requirements_check_.get());
-  check_group_->AddCheck(blocklist_check_.get());
 
   check_group_->Start(
       base::BindOnce(&CrxInstaller::OnInstallChecksComplete, this));
--- a/chrome/browser/extensions/webstore_data_fetcher.cc
+++ b/chrome/browser/extensions/webstore_data_fetcher.cc
@@ -10,7 +10,6 @@
 #include "base/metrics/field_trial_params.h"
 #include "base/values.h"
 #include "chrome/browser/extensions/webstore_data_fetcher_delegate.h"
-#include "components/safe_browsing/core/common/features.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/storage_partition.h"
--- a/chrome/browser/interstitials/enterprise_util.cc
+++ b/chrome/browser/interstitials/enterprise_util.cc
@@ -4,44 +4,15 @@
 
 #include "chrome/browser/interstitials/enterprise_util.h"
 
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/buildflags/buildflags.h"
 
-namespace {
-
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-extensions::SafeBrowsingPrivateEventRouter* GetEventRouter(
-    content::WebContents* web_contents) {
-  // |web_contents| can be null in tests.
-  if (!web_contents)
-    return nullptr;
-
-  content::BrowserContext* browser_context = web_contents->GetBrowserContext();
-  if (browser_context->IsOffTheRecord())
-    return nullptr;
-
-  return extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(
-      browser_context);
-}
-#endif  // BUILDFLAG(ENABLE_EXTENSIONS)
-
-}  // namespace
-
 void MaybeTriggerSecurityInterstitialShownEvent(
     content::WebContents* web_contents,
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialShown(page_url, reason, net_error_code);
-#endif
 }
 
 void MaybeTriggerSecurityInterstitialProceededEvent(
@@ -49,12 +20,4 @@ void MaybeTriggerSecurityInterstitialPro
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialProceeded(page_url, reason,
-                                                net_error_code);
-#endif
 }
--- a/chrome/browser/interstitials/enterprise_util.h
+++ b/chrome/browser/interstitials/enterprise_util.h
@@ -5,7 +5,8 @@
 #ifndef CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 #define CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 
-#include "components/safe_browsing/core/browser/db/v4_protocol_manager_util.h"
+#include <string>
+#include "url/gurl.h"
 
 namespace content {
 class WebContents;
--- a/chrome/browser/metrics/chrome_metrics_service_accessor.h
+++ b/chrome/browser/metrics/chrome_metrics_service_accessor.h
@@ -63,18 +63,6 @@ namespace welcome {
 void JoinOnboardingGroup(Profile* profile);
 }
 
-namespace safe_browsing {
-class ChromeCleanerControllerDelegate;
-class ChromeSafeBrowsingUIManagerDelegate;
-class DownloadUrlSBClient;
-class IncidentReportingService;
-class SafeBrowsingService;
-
-namespace internal {
-class ReporterRunner;
-}  // namespace internal
-}  // namespace safe_browsing
-
 namespace settings {
 class MetricsReportingHandler;
 }
@@ -124,12 +112,6 @@ class ChromeMetricsServiceAccessor : pub
   friend class heap_profiling::BackgroundProfilingTriggers;
   friend class settings::MetricsReportingHandler;
   friend class UmaSessionStats;
-  friend class safe_browsing::ChromeCleanerControllerDelegate;
-  friend class safe_browsing::ChromeSafeBrowsingUIManagerDelegate;
-  friend class safe_browsing::DownloadUrlSBClient;
-  friend class safe_browsing::IncidentReportingService;
-  friend class safe_browsing::internal::ReporterRunner;
-  friend class safe_browsing::SafeBrowsingService;
   friend class ChromeMetricsServiceClient;
   friend class ChromePasswordManagerClient;
   friend void welcome::JoinOnboardingGroup(Profile* profile);
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -55,8 +55,6 @@
 #include "chrome/browser/privacy_budget/privacy_budget_prefs.h"
 #include "chrome/browser/privacy_budget/privacy_budget_ukm_entry_filter.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
-#include "chrome/browser/safe_browsing/metrics/safe_browsing_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/sync_service_factory.h"
 #include "chrome/browser/tracing/background_tracing_metrics_provider.h"
@@ -714,11 +712,6 @@ void ChromeMetricsServiceClient::Registe
   metrics_service_->RegisterMetricsProvider(MakeDemographicMetricsProvider(
       metrics::MetricsLogUploader::MetricServiceType::UMA));
 
-  // TODO(crbug.com/1207574): Add metrics registration for WebView, iOS and
-  // WebLayer.
-  metrics_service_->RegisterMetricsProvider(
-      std::make_unique<safe_browsing::SafeBrowsingMetricsProvider>());
-
 #if defined(OS_ANDROID)
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<metrics::AndroidMetricsProvider>());
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -25,7 +25,6 @@
 #include "chrome/browser/component_updater/first_party_sets_component_installer.h"
 #include "chrome/browser/net/chrome_mojo_proxy_resolver_factory.h"
 #include "chrome/browser/net/convert_explicitly_allowed_network_ports_pref.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/sct_reporting_service.h"
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/common/channel_info.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_browsertest.cc
@@ -71,9 +71,6 @@ IN_PROC_BROWSER_TEST_F(TrialComparisonCe
 
 IN_PROC_BROWSER_TEST_F(TrialComparisonCertVerifierFeatureEnabledTest,
                        TrialEnabledPrefEnabled) {
-  safe_browsing::SetExtendedReportingPrefForTests(
-      browser()->profile()->GetPrefs(), true);
-
   ASSERT_TRUE(https_test_server_.Start());
   base::HistogramTester histograms;
   ASSERT_TRUE(ui_test_utils::NavigateToURL(
@@ -121,9 +118,6 @@ class TrialComparisonCertVerifierFeature
 IN_PROC_BROWSER_TEST_F(
     TrialComparisonCertVerifierFeatureOverridenByBuiltinVerifierTest,
     TrialEnabledPrefEnabledBuiltVerifierEnabled) {
-  safe_browsing::SetExtendedReportingPrefForTests(
-      browser()->profile()->GetPrefs(), true);
-
   ASSERT_TRUE(https_test_server_.Start());
   base::HistogramTester histograms;
   ASSERT_TRUE(ui_test_utils::NavigateToURL(
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -16,8 +16,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_task_traits.h"
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller_unittest.cc
@@ -13,9 +13,6 @@
 #include "base/test/scoped_feature_list.h"
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_test_utils.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_service.h"
 #include "chrome/common/chrome_paths.h"
 #include "chrome/test/base/testing_browser_process.h"
 #include "chrome/test/base/testing_profile.h"
@@ -131,12 +128,6 @@ class TrialComparisonCertVerifierControl
     ASSERT_TRUE(profile_manager_->SetUp());
     ASSERT_TRUE(g_browser_process->profile_manager());
 
-    sb_service_ =
-        base::MakeRefCounted<safe_browsing::TestSafeBrowsingService>();
-    TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(
-        sb_service_.get());
-    g_browser_process->safe_browsing_service()->Initialize();
-
     // SafeBrowsingService expects to be initialized before any profiles are
     // created.
     profile_ = profile_manager_->CreateTestingProfile("profile1");
@@ -172,11 +163,6 @@ class TrialComparisonCertVerifierControl
     // Ensure mock expectations are checked.
     mock_config_client_ = nullptr;
 
-    if (TestingBrowserProcess::GetGlobal()->safe_browsing_service()) {
-      TestingBrowserProcess::GetGlobal()->safe_browsing_service()->ShutDown();
-      TestingBrowserProcess::GetGlobal()->SetSafeBrowsingService(nullptr);
-    }
-
     TrialComparisonCertVerifierController::SetFakeOfficialBuildForTesting(
         false);
   }
@@ -215,7 +201,6 @@ class TrialComparisonCertVerifierControl
   scoped_refptr<CertificateReportingServiceTestHelper>
       reporting_service_test_helper_;
   content::BrowserTaskEnvironment task_environment_;
-  scoped_refptr<safe_browsing::SafeBrowsingService> sb_service_;
   std::unique_ptr<TestingProfileManager> profile_manager_;
   TestingProfile* profile_;
 
@@ -232,10 +217,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Trial should not be allowed.
   EXPECT_FALSE(trial_controller().IsAllowed());
 
-  // Enable the SBER pref, shouldn't matter since it's a non-official build and
-  // field trial isn't enabled.
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -257,7 +238,6 @@ TEST_F(TrialComparisonCertVerifierContro
   CreateController();
 
   EXPECT_FALSE(trial_controller().IsAllowed());
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
@@ -288,7 +268,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // In a real official build, expect the trial config to be updated.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
 #endif
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
 #if defined(OFFICIAL_BUILD) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // In a real official build, expect the trial to be allowed now.  (Don't
@@ -326,7 +305,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Enable the SBER pref, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -378,7 +356,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Disable the SBER pref again, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), false);
 
   // Not allowed now.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -423,7 +400,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -483,7 +459,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(false)).Times(1);
   EXPECT_CALL(mock_config_client_2, OnTrialConfigUpdated(false)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), false);
 
   // Not allowed now.
   EXPECT_FALSE(trial_controller().IsAllowed());
@@ -516,7 +491,6 @@ TEST_F(TrialComparisonCertVerifierContro
   // Enable the SBER pref, which should trigger the OnTrialConfigUpdated
   // callback.
   EXPECT_CALL(mock_config_client(), OnTrialConfigUpdated(true)).Times(1);
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
 
   // Trial should now be allowed.
   EXPECT_TRUE(trial_controller().IsAllowed());
@@ -549,9 +523,6 @@ TEST_F(TrialComparisonCertVerifierContro
 
   EXPECT_FALSE(trial_controller().IsAllowed());
 
-  // Enable the SBER pref, shouldn't matter since it's an incognito profile.
-  safe_browsing::SetExtendedReportingPrefForTests(pref_service(), true);
-
   // Trial still not allowed, and OnTrialConfigUpdated should not be called
   // either.
   EXPECT_FALSE(trial_controller().IsAllowed());
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -854,18 +854,6 @@ void ChromePasswordManagerClient::MaybeR
     const GURL& url,
     bool is_federated,
     const url::Origin& federated_origin) const {
-  if (!base::FeatureList::IsEnabled(policy::features::kLoginEventReporting))
-    return;
-
-  extensions::SafeBrowsingPrivateEventRouter* router =
-      extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(
-          profile_);
-  if (!router)
-    return;
-
-  // The router is responsible for checking if the reporting of this event type
-  // is enabled by the admin.
-  router->OnLoginEvent(url, is_federated, federated_origin);
 }
 #endif
 
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -440,7 +440,6 @@ const PolicyToPreferenceMapEntry kSimple
   { key::kImportAutofillFormData,
     prefs::kImportDialogAutofillFormData,
     base::Value::Type::BOOLEAN },
-
   { key::kMaxConnectionsPerProxy,
     prefs::kMaxConnectionsPerProxy,
     base::Value::Type::INTEGER },
@@ -1503,11 +1502,6 @@ std::unique_ptr<ConfigurationPolicyHandl
           base::BindRepeating(&PopulatePolicyHandlerParameters),
           base::BindRepeating(&GetChromePolicyDetails),
           AreFuturePoliciesSupported()));
-  for (size_t i = 0; i < base::size(kSimplePolicyMap); ++i) {
-    handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
-        kSimplePolicyMap[i].policy_name, kSimplePolicyMap[i].preference_path,
-        kSimplePolicyMap[i].value_type));
-  }
 
   handlers->AddHandler(
       std::make_unique<autofill::AutofillAddressPolicyHandler>());
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -95,7 +95,6 @@
 #include "chrome/common/pref_names.h"
 #include "chrome/common/secure_origin_allowlist.h"
 #include "components/autofill/core/common/autofill_prefs.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/browsing_data/core/pref_names.h"
 #include "components/certificate_transparency/pref_names.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
@@ -386,16 +385,12 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
 #include "chrome/browser/media/cdm_pref_service_helper.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
 #include "chrome/browser/win/conflicts/module_database.h"
 #include "chrome/browser/win/conflicts/third_party_conflicts_manager.h"
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_prefs_manager.h"
 #endif
 
 #if defined(OS_WIN) || defined(OS_MAC)
@@ -1060,8 +1055,6 @@ void RegisterLocalState(PrefRegistrySimp
                                 true);
   registry->RegisterBooleanPref(
       policy::policy_prefs::kNativeWindowOcclusionEnabled, true);
-  component_updater::RegisterPrefsForSwReporter(registry);
-  safe_browsing::RegisterChromeCleanerScanCompletionTimePref(registry);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   IncompatibleApplicationsUpdater::RegisterLocalStatePrefs(registry);
   ModuleDatabase::RegisterLocalStatePrefs(registry);
@@ -1151,8 +1144,6 @@ void RegisterProfilePrefs(user_prefs::Pr
   QuietNotificationPermissionUiState::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
   SearchPrefetchService::RegisterProfilePrefs(registry);
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
-      registry);
   security_interstitials::InsecureFormBlockingPage::RegisterProfilePrefs(
       registry);
   segmentation_platform::SegmentationPlatformService::RegisterProfilePrefs(
@@ -1350,11 +1341,6 @@ void RegisterProfilePrefs(user_prefs::Pr
 
 #if defined(OS_WIN)
   CdmPrefServiceHelper::RegisterProfilePrefs(registry);
-  component_updater::RegisterProfilePrefsForSwReporter(registry);
-  NetworkProfileBubble::RegisterProfilePrefs(registry);
-  safe_browsing::SettingsResetPromptPrefsManager::RegisterProfilePrefs(
-      registry);
-  safe_browsing::PostCleanupSettingsResetter::RegisterProfilePrefs(registry);
 #endif
 
 // TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -73,7 +73,6 @@
 #include "chrome/browser/privacy_sandbox/privacy_sandbox_settings_factory.h"
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
 #include "chrome/browser/profiles/renderer_updater_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/search_engines/template_url_fetcher_factory.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
 #include "chrome/browser/segmentation_platform/segmentation_platform_service_factory.h"
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -89,14 +89,6 @@ export class SettingsPrivacyPageElement
       showClearBrowsingDataDialog_: Boolean,
 
       /** @private */
-      enableSafeBrowsingSubresourceFilter_: {
-        type: Boolean,
-        value() {
-          return false;
-        }
-      },
-
-      /** @private */
       cookieSettingDescription_: String,
 
       /** @private */
--- a/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
+++ b/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
@@ -59,7 +59,6 @@ static_library("chrome_cleaner") {
     ":public",
     "//chrome/browser:browser_process",
     "//chrome/browser/profiles:profile",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui",
     "//chrome/common",
     "//chrome/installer/util:with_no_strings",
@@ -68,7 +67,6 @@ static_library("chrome_cleaner") {
     "//components/component_updater",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//content/public/browser",
     "//third_party/protobuf:protobuf_lite",
   ]
--- a/chrome/browser/signin/signin_util_win.cc
+++ b/chrome/browser/signin/signin_util_win.cc
@@ -270,12 +270,6 @@ bool IsGCPWUsedInOtherProfile(Profile* p
 }
 
 void SigninWithCredentialProviderIfPossible(Profile* profile) {
-  // This flow is used for first time signin through credential provider. Any
-  // subsequent signin for the credential provider user needs to go through
-  // reauth flow.
-  if (profile->GetPrefs()->GetBoolean(prefs::kSignedInWithCredentialProvider))
-    return;
-
   std::wstring cred_provider_gaia_id;
   std::wstring cred_provider_email;
 
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -17,7 +17,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/https_only_mode_tab_helper.h"
 #include "chrome/browser/ssl/known_interception_disclosure_infobar_delegate.h"
 #include "chrome/common/chrome_features.h"
@@ -30,7 +29,6 @@
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/ui_manager.h"
 #include "components/security_interstitials/core/features.h"
 #include "components/security_interstitials/core/pref_names.h"
 #include "components/security_state/content/content_utils.h"
@@ -57,10 +55,6 @@
 #include "chrome/browser/ash/policy/networking/policy_cert_service_factory.h"
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
-#endif
-
 namespace {
 
 void RecordSecurityLevel(
@@ -80,7 +74,6 @@ void RecordSecurityLevel(
 }  // namespace
 
 using password_manager::metrics_util::PasswordType;
-using safe_browsing::SafeBrowsingUIManager;
 
 SecurityStateTabHelper::SecurityStateTabHelper(
     content::WebContents* web_contents)
--- a/chrome/browser/subresource_filter/chrome_content_subresource_filter_web_contents_helper_factory.cc
+++ b/chrome/browser/subresource_filter/chrome_content_subresource_filter_web_contents_helper_factory.cc
@@ -24,10 +24,7 @@ GetDatabaseManagerFromSafeBrowsingServic
 
 void CreateSubresourceFilterWebContentsHelper(
     content::WebContents* web_contents) {
-  subresource_filter::RulesetService* ruleset_service =
-      g_browser_process->subresource_filter_ruleset_service();
-  subresource_filter::VerifiedRulesetDealer::Handle* dealer =
-      ruleset_service ? ruleset_service->GetRulesetDealer() : nullptr;
+  subresource_filter::VerifiedRulesetDealer::Handle* dealer = nullptr;
   subresource_filter::ContentSubresourceFilterWebContentsHelper::
       CreateForWebContents(
           web_contents,
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -396,7 +396,6 @@ static_library("ui") {
     "//chrome/browser/resources/omnibox:resources",
     "//chrome/browser/resources/quota_internals:resources",
     "//chrome/browser/resources/usb_internals:resources",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/ui/webui/download_shelf:mojo_bindings",
     "//chrome/browser/ui/webui/downloads:mojo_bindings",
@@ -511,15 +510,6 @@ static_library("ui") {
     "//components/reading_list/features:flags",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/browser/password_protection",
-    "//components/safe_browsing/content/browser/web_ui",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/browser/db:util",
-    "//components/safe_browsing/core/browser/password_protection:password_protection_metrics_util",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/schema_org/common:improved_mojom",
     "//components/search",
     "//components/search_engines",
@@ -626,7 +616,6 @@ static_library("ui") {
   allow_circular_includes_from = [
     # TODO(crbug.com/1158905): Remove this circular dependency.
     "//chrome/browser/devtools",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/profiling_host",
   ]
@@ -1620,7 +1609,6 @@ static_library("ui") {
       "//chrome/browser/profile_resetter:profile_reset_report_proto",
       "//chrome/browser/resource_coordinator:tab_metrics_event_proto",
       "//chrome/browser/resource_coordinator/tab_ranker",
-      "//chrome/browser/safe_browsing:advanced_protection",
       "//chrome/browser/ui/color:color_headers",
       "//chrome/browser/ui/color:mixers",
       "//chrome/browser/ui/commander:fuzzy_finder",
@@ -3444,10 +3432,6 @@ static_library("ui") {
       "views/apps/glass_app_window_frame_view_win.cc",
       "views/apps/glass_app_window_frame_view_win.h",
       "views/certificate_viewer_win.cc",
-      "views/chrome_cleaner_dialog_win.cc",
-      "views/chrome_cleaner_dialog_win.h",
-      "views/chrome_cleaner_reboot_dialog_win.cc",
-      "views/chrome_cleaner_reboot_dialog_win.h",
       "views/critical_notification_bubble_view.cc",
       "views/critical_notification_bubble_view.h",
       "views/frame/browser_desktop_window_tree_host.h",
@@ -3469,8 +3453,6 @@ static_library("ui") {
       "views/frame/windows_10_tab_search_caption_button.cc",
       "views/frame/windows_10_tab_search_caption_button.h",
       "views/network_profile_bubble_view.cc",
-      "views/settings_reset_prompt_dialog.cc",
-      "views/settings_reset_prompt_dialog.h",
       "views/status_icons/status_icon_win.cc",
       "views/status_icons/status_icon_win.h",
       "views/status_icons/status_tray_state_changer_win.cc",
@@ -3493,8 +3475,6 @@ static_library("ui") {
       "webui/conflicts/conflicts_ui.h",
       "webui/sandbox/sandbox_handler.cc",
       "webui/sandbox/sandbox_handler.h",
-      "webui/settings/chrome_cleanup_handler_win.cc",
-      "webui/settings/chrome_cleanup_handler_win.h",
       "webui/settings/settings_utils_win.cc",
       "webui/version/version_handler_win.cc",
       "webui/version/version_handler_win.h",
@@ -3507,7 +3487,6 @@ static_library("ui") {
       "//ui/views/controls/webview",
     ]
     deps += [
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/ui/startup:buildflags",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/credential_provider/common:common_constants",
@@ -4322,14 +4301,6 @@ static_library("ui") {
       "views/relaunch_notification/relaunch_required_timer_internal.h",
       "views/sad_tab_view.cc",
       "views/sad_tab_view.h",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.h",
-      "views/safe_browsing/deep_scanning_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_modal_dialog.h",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.cc",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.h",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.cc",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.cc",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_view_impl.cc",
@@ -5051,20 +5022,6 @@ static_library("ui") {
     ]
   }
 
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "webui/reset_password/reset_password_ui.cc",
-      "webui/reset_password/reset_password_ui.h",
-    ]
-
-    deps += [
-      "//chrome/browser/ui/webui/reset_password:mojo_bindings",
-      "//chrome/common/safe_browsing:proto",
-      "//components/safe_browsing/core/browser/password_protection:password_protection_metrics_util",
-      "//components/safe_browsing/core/common/proto:csd_proto",
-    ]
-  }
-
   if (use_dbus) {
     deps += [ "//dbus" ]
   }
--- a/chrome/browser/ui/browser_dialogs.h
+++ b/chrome/browser/ui/browser_dialogs.h
@@ -62,9 +62,6 @@ enum class PermissionAction;
 }
 
 namespace safe_browsing {
-class ChromeCleanerController;
-class ChromeCleanerDialogController;
-class ChromeCleanerRebootDialogController;
 class SettingsResetPromptController;
 }  // namespace safe_browsing
 
@@ -395,21 +392,6 @@ void ShowSettingsResetPrompt(
     Browser* browser,
     safe_browsing::SettingsResetPromptController* controller);
 
-// Shows the Chrome Cleanup dialog asking the user if they want to clean their
-// system from unwanted software. This is called when unwanted software has been
-// detected on the system.
-void ShowChromeCleanerPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerDialogController* dialog_controller,
-    safe_browsing::ChromeCleanerController* cleaner_controller);
-
-// Shows the Chrome Cleanup reboot dialog asking the user if they want to
-// restart their computer once a cleanup has finished. This is called when the
-// Chrome Cleanup ends in a reboot required state.
-void ShowChromeCleanerRebootPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerRebootDialogController* dialog_controller);
-
 #endif  // OS_WIN
 
 // Displays a dialog to notify the user that the extension installation is
--- a/chrome/browser/ui/page_info/chrome_page_info_delegate.cc
+++ b/chrome/browser/ui/page_info/chrome_page_info_delegate.cc
@@ -11,7 +11,6 @@
 #include "chrome/browser/permissions/permission_decision_auto_blocker_factory.h"
 #include "chrome/browser/permissions/permission_manager_factory.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
 #include "chrome/browser/ssl/security_state_tab_helper.h"
 #include "chrome/browser/ssl/stateful_ssl_host_state_delegate_factory.h"
 #include "chrome/browser/subresource_filter/subresource_filter_profile_context_factory.h"
--- a/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
+++ b/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
@@ -16,7 +16,6 @@
 #include "chrome/browser/enterprise/connectors/analysis/content_analysis_delegate.h"
 #endif
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/browser/web_contents_view_delegate.h"
@@ -115,14 +114,14 @@ void HandleOnPerformDrop(
     content::WebContentsViewDelegate::DropCompletionCallback callback) {
 #if BUILDFLAG(FULL_SAFE_BROWSING)
   enterprise_connectors::ContentAnalysisDelegate::Data data;
-#endif
+
   Profile* profile =
       Profile::FromBrowserContext(web_contents->GetBrowserContext());
   auto connector =
       drop_data.filenames.empty()
           ? enterprise_connectors::AnalysisConnector::BULK_DATA_ENTRY
           : enterprise_connectors::AnalysisConnector::FILE_ATTACHED;
-#if BUILDFLAG(FULL_SAFE_BROWSING)
+
   if (!enterprise_connectors::ContentAnalysisDelegate::IsEnabled(
           profile, web_contents->GetLastCommittedURL(), &data, connector)) {
     std::move(callback).Run(
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -56,10 +56,6 @@
 #include "chrome/browser/profiles/profile_key.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
 #include "chrome/browser/resource_coordinator/tab_helper.h"
-#include "chrome/browser/safe_browsing/chrome_safe_browsing_tab_observer_delegate.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/trigger_creator.h"
 #include "chrome/browser/sessions/session_tab_helper_factory.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/connection_help_tab_helper.h"
--- a/chrome/browser/ui/views/download/download_item_view.cc
+++ b/chrome/browser/ui/views/download/download_item_view.cc
@@ -36,23 +36,16 @@
 #include "chrome/browser/enterprise/connectors/analysis/content_analysis_downloads_delegate.h"
 #include "chrome/browser/enterprise/connectors/connectors_service.h"
 #include "chrome/browser/icon_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/themes/theme_properties.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/tab_modal_confirm_dialog.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
 #include "chrome/browser/ui/views/chrome_typography.h"
 #include "chrome/browser/ui/views/download/download_shelf_view.h"
-#include "chrome/browser/ui/views/safe_browsing/deep_scanning_modal_dialog.h"
-#include "chrome/browser/ui/views/safe_browsing/prompt_for_scanning_modal_dialog.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/common/features.h"
 #include "components/url_formatter/elide_url.h"
 #include "components/vector_icons/vector_icons.h"
 #include "third_party/skia/include/core/SkColor.h"
@@ -191,14 +184,10 @@ BEGIN_METADATA(TransparentButton, views:
 END_METADATA
 
 bool UseNewWarnings() {
-  return base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings);
+  return false;
 }
 
 int GetFilenameStyle(const views::Label& label) {
-#if !defined(OS_LINUX) && !defined(OS_CHROMEOS)
-  if (UseNewWarnings())
-    return STYLE_EMPHASIZED;
-#endif
   return label.GetTextStyle();
 }
 
@@ -1104,11 +1093,7 @@ ui::ImageModel DownloadItemView::GetIcon
   const auto danger_type = model_->GetDangerType();
   switch (danger_type) {
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
-      return safe_browsing::AdvancedProtectionStatusManagerFactory::
-                     GetForProfile(model_->profile())
-                         ->IsUnderAdvancedProtection()
-                 ? kWarning
-                 : kError;
+      return kError;
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
@@ -1348,23 +1333,6 @@ void DownloadItemView::ReviewButtonPress
 }
 
 void DownloadItemView::ShowOpenDialog(content::WebContents* web_contents) {
-  if (mode_ == download::DownloadItemMode::kDeepScanning) {
-    TabModalConfirmDialog::Create(
-        std::make_unique<safe_browsing::DeepScanningModalDialog>(
-            web_contents,
-            base::BindOnce(&DownloadItemView::OpenDownloadDuringAsyncScanning,
-                           weak_ptr_factory_.GetWeakPtr())),
-        web_contents);
-  } else {
-    safe_browsing::PromptForScanningModalDialog::ShowForWebContents(
-        web_contents, model_->GetFileNameToReportUser().LossyDisplayName(),
-        base::BindOnce(&DownloadItemView::ExecuteCommand,
-                       weak_ptr_factory_.GetWeakPtr(),
-                       DownloadCommands::DEEP_SCAN),
-        base::BindOnce(&DownloadItemView::ExecuteCommand,
-                       weak_ptr_factory_.GetWeakPtr(),
-                       DownloadCommands::BYPASS_DEEP_SCANNING));
-  }
 }
 
 void DownloadItemView::ShowContextMenuImpl(const gfx::Rect& rect,
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -166,7 +166,6 @@
 #include "components/permissions/permission_request_manager.h"
 #include "components/prefs/pref_service.h"
 #include "components/reading_list/core/reading_list_pref_names.h"
-#include "components/safe_browsing/core/browser/password_protection/metrics_util.h"
 #include "components/sessions/core/tab_restore_service.h"
 #include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/translate/core/browser/language_state.h"
--- a/chrome/browser/ui/views/frame/browser_window_factory.cc
+++ b/chrome/browser/ui/views/frame/browser_window_factory.cc
@@ -14,7 +14,6 @@
 #endif
 #include "chrome/browser/ui/views/frame/native_browser_frame_factory.h"
 #include "chrome/grit/chromium_strings.h"
-#include "components/safe_browsing/core/browser/password_protection/metrics_util.h"
 #if defined(USE_AURA)
 #include "ui/aura/client/aura_constants.h"
 #include "ui/aura/window.h"
--- a/chrome/browser/ui/webui/browser_command/browser_command_handler.cc
+++ b/chrome/browser/ui/webui/browser_command/browser_command_handler.cc
@@ -14,8 +14,6 @@
 #include "chrome/browser/ui/browser_navigator.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/common/webui_url_constants.h"
-#include "components/safe_browsing/content/browser/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
 #include "ui/base/page_transition_types.h"
 #include "ui/base/window_open_disposition.h"
 
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -77,8 +77,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/reading_list/features/reading_list_switches.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/web_ui_constants.h"
 #include "components/security_interstitials/content/connection_help_ui.h"
 #include "components/security_interstitials/content/known_interception_disclosure_ui.h"
 #include "components/security_interstitials/content/urls.h"
@@ -653,8 +651,6 @@ WebUIFactoryFunction GetWebUIFactoryFunc
     return &NewWebUI<PredictorsUI>;
   if (url.host_piece() == chrome::kChromeUIQuotaInternalsHost)
     return &NewWebUI<QuotaInternalsUI>;
-  if (url.host_piece() == safe_browsing::kChromeUISafeBrowsingHost)
-    return &NewWebUI<safe_browsing::SafeBrowsingUI>;
   if (url.host_piece() == chrome::kChromeUISignInInternalsHost)
     return &NewWebUI<SignInInternalsUI>;
   if (url.host_piece() == chrome::kChromeUISupervisedUserPassphrasePageHost)
--- a/chrome/browser/ui/webui/downloads/downloads_ui.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_ui.cc
@@ -17,8 +17,6 @@
 #include "chrome/browser/defaults.h"
 #include "chrome/browser/enterprise/connectors/connectors_service.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/ui_features.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom.h"
 #include "chrome/browser/ui/webui/downloads/downloads_dom_handler.h"
@@ -62,12 +60,8 @@ content::WebUIDataSource* CreateDownload
   webui::SetupWebUIDataSource(
       source, base::make_span(kDownloadsResources, kDownloadsResourcesSize),
       IDR_DOWNLOADS_DOWNLOADS_HTML);
-
-  bool requests_ap_verdicts =
-      safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-          profile)
-          ->IsUnderAdvancedProtection();
-  source->AddBoolean("requestsApVerdicts", requests_ap_verdicts);
+      
+  source->AddBoolean("requestsApVerdicts", false);
 
   static constexpr webui::LocalizedString kStrings[] = {
       {"title", IDS_DOWNLOAD_TITLE},
@@ -124,11 +118,8 @@ content::WebUIDataSource* CreateDownload
 
   source->AddLocalizedString("dangerDownloadDesc",
                              IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD);
-  source->AddLocalizedString(
-      "dangerUncommonDesc",
-      requests_ap_verdicts
-          ? IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION
-          : IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
+  source->AddLocalizedString("dangerUncommonDesc",
+                             IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
   source->AddLocalizedString("dangerSettingsDesc",
                              IDS_BLOCK_REASON_UNWANTED_DOWNLOAD);
   source->AddLocalizedString("mixedContentDownloadDesc",
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -16,8 +16,6 @@
 #include "chrome/browser/lookalikes/lookalike_url_blocking_page.h"
 #include "chrome/browser/lookalikes/lookalike_url_controller_client.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_blocking_page_quiet.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/https_only_mode_controller_client.h"
 #include "chrome/browser/ssl/insecure_form/insecure_form_controller_client.h"
@@ -26,9 +24,6 @@
 #include "components/captive_portal/core/buildflags.h"
 #include "components/grit/dev_ui_components_resources.h"
 #include "components/lookalikes/core/lookalike_url_util.h"
-#include "components/safe_browsing/content/browser/safe_browsing_blocking_page.h"
-#include "components/safe_browsing/content/browser/ui_manager.h"
-#include "components/safe_browsing/core/browser/db/database_manager.h"
 #include "components/security_interstitials/content/bad_clock_blocking_page.h"
 #include "components/security_interstitials/content/blocked_interception_blocking_page.h"
 #include "components/security_interstitials/content/https_only_mode_blocking_page.h"
@@ -68,8 +63,6 @@
 #include "chrome/browser/supervised_user/supervised_user_interstitial.h"
 #endif
 
-using security_interstitials::TestSafeBrowsingBlockingPageQuiet;
-
 namespace {
 
 // NSS requires that serial numbers be unique even for the same issuer;
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -119,7 +119,6 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
 #include "device/fido/win/webauthn_api.h"
 
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
@@ -702,10 +701,6 @@ void AddResetStrings(content::WebUIDataS
       "showResetProfileBanner",
       ResetSettingsHandler::ShouldShowResetProfileBanner(profile));
   bool is_reset_shortcuts_feature_enabled = false;
-#if defined(OS_WIN)
-  // TODO(crbug/1234599): Remove this flag from the JS.
-  is_reset_shortcuts_feature_enabled = true;
-#endif
   html_source->AddBoolean("showExplanationWithBulletPoints",
                           is_reset_shortcuts_feature_enabled);
 
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -79,9 +79,6 @@
 #include "ui/resources/grit/webui_resources.h"
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
-#include "chrome/browser/ui/webui/settings/chrome_cleanup_handler_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/ui/webui/settings/incompatible_applications_handler_win.h"
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
@@ -239,10 +236,6 @@ SettingsUI::SettingsUI(content::WebUI* w
   AddSettingsPageUIHandler(std::make_unique<SystemHandler>());
 #endif
 
-#if defined(OS_WIN)
-  AddSettingsPageUIHandler(std::make_unique<ChromeCleanupHandler>(profile));
-#endif  // defined(OS_WIN)
-
 #if defined(OS_WIN) || defined(OS_MAC) || \
     (defined(OS_LINUX) && !BUILDFLAG(IS_CHROMEOS_LACROS))
   AddSettingsPageUIHandler(std::make_unique<UrlHandlersHandler>(
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -199,7 +199,6 @@ static_library("common") {
     "//components/policy/core/common",
     "//components/prefs",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/core/common",
     "//components/services/app_service/public/cpp:app_share_target",
     "//components/services/heap_profiling/public/cpp",
     "//components/strings",
@@ -486,10 +485,6 @@ static_library("common") {
     }
   }
 
-  if (safe_browsing_mode != 0) {
-    public_deps += [ "//chrome/common/safe_browsing" ]
-  }
-
   if (is_linux || is_chromeos) {
     sources += [
       "auto_start_linux.cc",
@@ -765,10 +760,6 @@ mojom("mojo_bindings") {
     public_deps += [ "//components/remote_cocoa/common:mojo" ]
   }
 
-  if (safe_browsing_mode == 1) {
-    public_deps += [ "//chrome/services/file_util/public/mojom" ]
-  }
-
   overridden_deps = [
     "//content/public/common:interfaces",
     "//third_party/blink/public/mojom:mojom_platform",
--- a/chrome/common/extensions/api/api_sources.gni
+++ b/chrome/common/extensions/api/api_sources.gni
@@ -46,7 +46,6 @@ schema_sources_ = [
   "passwords_private.idl",
   "permissions.json",
   "resources_private.idl",
-  "safe_browsing_private.idl",
   "scripting.idl",
   "search.idl",
   "sessions.json",
--- a/chrome/common/features.gni
+++ b/chrome/common/features.gni
@@ -88,7 +88,6 @@ chrome_grit_defines = [
   "enable_supervised_users=$enable_supervised_users",
   "enable_vr=$enable_vr",
   "enable_webui_tab_strip=$enable_webui_tab_strip",
-  "safe_browsing_mode=$safe_browsing_mode",
   "optimize_webui=$optimize_webui",
   "enable_feed_v2=$enable_feed_v2",
 ]
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -96,26 +96,6 @@ if (safe_browsing_mode == 1) {
 
   source_set("binary_feature_extractor") {
     sources = [
-      "binary_feature_extractor.cc",
-      "binary_feature_extractor.h",
-    ]
-    if (is_mac) {
-      sources += [
-        "binary_feature_extractor_mac.cc",
-        "mach_o_image_reader_mac.cc",
-        "mach_o_image_reader_mac.h",
-      ]
-    } else if (is_win) {
-      sources += [ "binary_feature_extractor_win.cc" ]
-    }
-    if (is_posix || is_fuchsia) {
-      sources += [ "binary_feature_extractor_posix.cc" ]
-    }
-
-    public_deps = [
-      "//base",
-      "//components/safe_browsing/core/common/proto:csd_proto",
-      "//crypto",
     ]
   }
 
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -8,7 +8,6 @@
 #include "base/strings/string_piece.h"
 #include "build/chromeos_buildflags.h"
 #include "components/nacl/common/buildflags.h"
-#include "components/safe_browsing/core/common/web_ui_constants.h"
 #include "extensions/buildflags/buildflags.h"
 #include "third_party/blink/public/common/chrome_debug_urls.h"
 
@@ -536,7 +535,6 @@ const char* const kChromeHostURLs[] = {
     kChromeUISignInInternalsHost,
     kChromeUISiteEngagementHost,
     kChromeUINTPTilesInternalsHost,
-    safe_browsing::kChromeUISafeBrowsingHost,
     kChromeUISyncInternalsHost,
 #if !defined(OS_ANDROID)
     kChromeUITermsHost,
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -183,11 +183,6 @@ static_library("renderer") {
     "//components/resources:components_resources",
     "//components/resources:components_scaled_resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/common:interfaces",
-    "//components/safe_browsing/content/renderer",
-    "//components/safe_browsing/content/renderer:throttles",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:interfaces",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
     "//components/security_interstitials/core:",
     "//components/security_interstitials/core/common/mojom:",
@@ -305,11 +300,6 @@ static_library("renderer") {
     deps += [ "//third_party/widevine/cdm:headers" ]
   }
 
-  if (safe_browsing_mode != 0) {
-    deps +=
-        [ "//components/safe_browsing/content/renderer/phishing_classifier" ]
-  }
-
   if (enable_feed_v2) {
     deps += [ "//components/feed/content/renderer:feed_renderer" ]
   }
--- a/chrome/renderer/url_loader_throttle_provider_impl.cc
+++ b/chrome/renderer/url_loader_throttle_provider_impl.cc
@@ -22,8 +22,6 @@
 #include "chrome/renderer/subresource_redirect/subresource_redirect_params.h"
 #include "chrome/renderer/subresource_redirect/subresource_redirect_url_loader_throttle.h"
 #include "components/no_state_prefetch/renderer/no_state_prefetch_helper.h"
-#include "components/safe_browsing/content/renderer/renderer_url_loader_throttle.h"
-#include "components/safe_browsing/core/common/features.h"
 #include "content/public/common/content_features.h"
 #include "content/public/renderer/render_frame.h"
 #include "content/public/renderer/render_thread.h"
@@ -96,7 +94,6 @@ URLLoaderThrottleProviderImpl::URLLoader
     : type_(type),
       chrome_content_renderer_client_(chrome_content_renderer_client) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 URLLoaderThrottleProviderImpl::~URLLoaderThrottleProviderImpl() {
@@ -108,18 +105,12 @@ URLLoaderThrottleProviderImpl::URLLoader
     : type_(other.type_),
       chrome_content_renderer_client_(other.chrome_content_renderer_client_) {
   DETACH_FROM_THREAD(thread_checker_);
-  if (other.safe_browsing_) {
-    other.safe_browsing_->Clone(
-        safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
-  }
   // An ad_delay_factory_ is created, rather than cloning the existing one.
 }
 
 std::unique_ptr<blink::URLLoaderThrottleProvider>
 URLLoaderThrottleProviderImpl::Clone() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_));
   return base::WrapUnique(new URLLoaderThrottleProviderImpl(*this));
 }
 
@@ -142,14 +133,6 @@ URLLoaderThrottleProviderImpl::CreateThr
   DCHECK(!is_frame_resource ||
          type_ == blink::URLLoaderThrottleProviderType::kFrame);
 
-  if (!is_frame_resource) {
-    if (safe_browsing_remote_)
-      safe_browsing_.Bind(std::move(safe_browsing_remote_));
-    throttles.emplace_back(
-        std::make_unique<safe_browsing::RendererURLLoaderThrottle>(
-            safe_browsing_.get(), render_frame_id));
-  }
-
   if (type_ == blink::URLLoaderThrottleProviderType::kFrame &&
       !is_frame_resource) {
     auto throttle =
--- a/chrome/renderer/url_loader_throttle_provider_impl.h
+++ b/chrome/renderer/url_loader_throttle_provider_impl.h
@@ -9,7 +9,6 @@
 #include <vector>
 
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "extensions/buildflags/buildflags.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -48,9 +47,6 @@ class URLLoaderThrottleProviderImpl : pu
   blink::URLLoaderThrottleProviderType type_;
   ChromeContentRendererClient* const chrome_content_renderer_client_;
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   std::unique_ptr<extensions::ExtensionThrottleManager>
       extension_throttle_manager_;
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
@@ -7,14 +7,12 @@
 #include <utility>
 
 #include "base/memory/ptr_util.h"
-#include "components/safe_browsing/content/renderer/websocket_sb_handshake_throttle.h"
 #include "content/public/renderer/render_thread.h"
 #include "third_party/blink/public/platform/websocket_handshake_throttle.h"
 
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     blink::ThreadSafeBrowserInterfaceBrokerProxy* broker) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 WebSocketHandshakeThrottleProviderImpl::
@@ -25,18 +23,12 @@ WebSocketHandshakeThrottleProviderImpl::
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     const WebSocketHandshakeThrottleProviderImpl& other) {
   DETACH_FROM_THREAD(thread_checker_);
-  DCHECK(other.safe_browsing_);
-  other.safe_browsing_->Clone(
-      safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 std::unique_ptr<blink::WebSocketHandshakeThrottleProvider>
 WebSocketHandshakeThrottleProviderImpl::Clone(
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
   return base::WrapUnique(new WebSocketHandshakeThrottleProviderImpl(*this));
 }
 
@@ -45,9 +37,5 @@ WebSocketHandshakeThrottleProviderImpl::
     int render_frame_id,
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
-  return std::make_unique<safe_browsing::WebSocketSBHandshakeThrottle>(
-      safe_browsing_.get(), render_frame_id);
+  return 0;
 }
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.h
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.h
@@ -9,7 +9,6 @@
 
 #include "base/macros.h"
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
@@ -37,9 +36,6 @@ class WebSocketHandshakeThrottleProvider
   WebSocketHandshakeThrottleProviderImpl(
       const WebSocketHandshakeThrottleProviderImpl& other);
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
   THREAD_CHECKER(thread_checker_);
 
   DISALLOW_ASSIGN(WebSocketHandshakeThrottleProviderImpl);
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -238,7 +238,6 @@ static_library("test_support") {
     "//build:chromeos_buildflags",
     "//chrome/app:command_ids",
     "//chrome/common/search:mojo_bindings",
-    "//components/safe_browsing/content/renderer/phishing_classifier:unit_tests_support",
     "//components/security_interstitials/content:security_interstitial_page",
   ]
 
@@ -284,8 +283,6 @@ static_library("test_support") {
     "//components/policy/core/common:test_support",
     "//components/prefs:test_support",
     "//components/profile_metrics",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/browser/db:v4_test_util",
     "//components/search_engines:test_support",
     "//components/sessions:test_support",
     "//components/signin/public/base:test_support",
@@ -1240,24 +1237,6 @@ if (!is_android && !is_fuchsia) {
       "//components/reputation/core:proto",
       "//components/resources",
       "//components/safe_browsing:buildflags",
-      "//components/safe_browsing/content/browser",
-      "//components/safe_browsing/content/browser:safe_browsing_service",
-      "//components/safe_browsing/content/browser/password_protection",
-      "//components/safe_browsing/content/browser/password_protection:test_support",
-      "//components/safe_browsing/content/browser/web_ui",
-      "//components/safe_browsing/content/common:interfaces",
-      "//components/safe_browsing/content/common:interfaces_shared_cpp_sources",
-      "//components/safe_browsing/content/renderer",
-      "//components/safe_browsing/content/renderer/phishing_classifier",
-      "//components/safe_browsing/content/renderer/phishing_classifier:unit_tests_support",
-      "//components/safe_browsing/core/browser:verdict_cache_manager",
-      "//components/safe_browsing/core/browser/db:metadata_proto",
-      "//components/safe_browsing/core/browser/db:test_database_manager",
-      "//components/safe_browsing/core/browser/db:v4_database",
-      "//components/safe_browsing/core/browser/db:v4_get_hash_protocol_manager",
-      "//components/safe_browsing/core/browser/password_protection:password_protection_metrics_util",
-      "//components/safe_browsing/core/common",
-      "//components/safe_browsing/core/common/proto:client_model_proto",
       "//components/search",
       "//components/security_interstitials/content:proto",
       "//components/security_interstitials/content:security_interstitial_page",
@@ -1557,7 +1536,6 @@ if (!is_android && !is_fuchsia) {
       "../browser/domain_reliability/browsertest.cc",
       "../browser/download/download_browsertest.cc",
       "../browser/download/download_browsertest.h",
-      "../browser/download/download_danger_prompt_browsertest.cc",
       "../browser/download/download_frame_policy_browsertest.cc",
       "../browser/download/download_started_animation_browsertest.cc",
       "../browser/download/save_page_browsertest.cc",
@@ -1830,14 +1808,6 @@ if (!is_android && !is_fuchsia) {
       "../browser/resource_coordinator/discard_before_unload_helper_browsertest.cc",
       "../browser/resource_coordinator/tab_activity_watcher_browsertest.cc",
       "../browser/resource_coordinator/tab_manager_browsertest.cc",
-      "../browser/safe_browsing/client_side_detection_service_browsertest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_browsertest_base.h",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
-      "../browser/safe_browsing/download_protection/download_protection_service_browsertest.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.cc",
-      "../browser/safe_browsing/test_safe_browsing_database_helper.h",
       "../browser/safe_xml_parser_browsertest.cc",
       "../browser/scoped_disable_client_side_decorations_for_test.cc",
       "../browser/scoped_disable_client_side_decorations_for_test.h",
@@ -1926,7 +1896,6 @@ if (!is_android && !is_fuchsia) {
       "../browser/ui/autofill/save_update_address_profile_bubble_controller_impl_browsertest.cc",
       "../browser/ui/blocked_content/popup_opener_tab_helper_browsertest.cc",
       "../browser/ui/blocked_content/popup_tracker_browsertest.cc",
-      "../browser/ui/blocked_content/safe_browsing_triggered_popup_blocker_browsertest.cc",
       "../browser/ui/blocked_content/tab_under_blocker_browsertest.cc",
       "../browser/ui/bookmarks/bookmark_browsertest.cc",
       "../browser/ui/browser_browsertest.cc",
@@ -2235,7 +2204,6 @@ if (!is_android && !is_fuchsia) {
         "../browser/policy/test/locale_policy_browsertest.cc",
         "../browser/process_singleton_browsertest.cc",
         "../browser/profiles/profile_shortcut_manager_browsertest_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc",
         "../browser/ui/startup/startup_browser_creator_corrupt_profiles_browsertest_win.cc",
         "../browser/ui/startup/startup_browser_creator_triggered_reset_browsertest_win.cc",
         "../browser/ui/startup/startup_browser_creator_welcome_back_browsertest.cc",
@@ -2676,9 +2644,6 @@ if (!is_android && !is_fuchsia) {
         "../browser/policy/extension_force_install_mixin.cc",
         "../browser/policy/extension_force_install_mixin.h",
         "../browser/policy/extension_policy_browsertest.cc",
-        "../browser/safe_browsing/settings_reset_prompt/default_settings_fetcher_browsertest.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-        "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
         "../browser/ui/views/extensions/extension_dialog_browsertest.cc",
         "../browser/ui/views/web_apps/pwa_confirmation_bubble_view_browsertest.cc",
         "../browser/ui/views/web_apps/web_app_confirmation_view_browsertest.cc",
@@ -2696,18 +2661,6 @@ if (!is_android && !is_fuchsia) {
         deps += [ "//chrome/browser/enterprise/connectors/device_trust/attestation/desktop:test_support" ]
       }
 
-      if (is_win) {
-        sources += [
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_reboot_dialog_controller_impl_browsertest_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.cc",
-          "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_controller_win.h",
-          "../browser/safe_browsing/chrome_cleaner/settings_resetter_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_dependency_browsertest_win.cc",
-          "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_browsertest_win.cc",
-        ]
-      }
-
       if (!is_chromeos_lacros) {
         sources += [ "../browser/extensions/api/image_writer_private/image_writer_private_apitest.cc" ]
       }
@@ -2891,7 +2844,6 @@ if (!is_android && !is_fuchsia) {
         "../browser/ui/views/profiles/profile_menu_view_browsertest.cc",
         "../browser/ui/views/qrcode_generator/qrcode_generator_bubble_browsertest.cc",
         "../browser/ui/views/read_later/read_later_button_browsertest.cc",
-        "../browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog_browsertest.cc",
         "../browser/ui/views/session_crashed_bubble_view_browsertest.cc",
         "../browser/ui/views/status_bubble_views_browsertest.cc",
         "../browser/ui/views/sync/inline_login_ui_browsertest.cc",
@@ -3688,40 +3640,6 @@ if (!is_android && !is_fuchsia) {
         "//url",
       ]
     }
-    if (safe_browsing_mode == 1) {
-      sources += [
-        "../browser/safe_browsing/certificate_reporting_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_browsertest.cc",
-        "../browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc",
-        "../browser/safe_browsing/client_side_detection_host_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_blocking_page_test.cc",
-        "../browser/safe_browsing/safe_browsing_navigation_observer_browsertest.cc",
-        "../browser/safe_browsing/safe_browsing_service_browsertest.cc",
-        "../browser/safe_browsing/v4_embedded_test_server_browsertest.cc",
-        "../browser/ssl/sct_reporting_service_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-        "../renderer/safe_browsing/phishing_dom_feature_extractor_browsertest.cc",
-        "../renderer/safe_browsing/threat_dom_details_browsertest.cc",
-      ]
-      deps += [
-        "//chrome/browser/safe_browsing:metrics_collector",
-        "//components/safe_browsing/content/browser:safe_browsing_blocking_page",
-        "//components/safe_browsing/core/common/fbs:client_model",
-      ]
-
-      if (is_win || is_linux) {
-        sources += [
-          "../browser/safe_browsing/download_protection/file_analyzer_browsertest.cc",
-        ]
-
-        deps += [
-          "//chrome/services/file_util:file_util",
-          "//chrome/services/file_util/public/cpp:cpp"
-        ]
-      }
-
-    }
 
     if (enable_captive_portal_detection) {
       sources += [ "../browser/captive_portal/captive_portal_browsertest.cc" ]
@@ -3762,15 +3680,6 @@ if (!is_android && !is_fuchsia) {
         # TaskManagerView is not used or built on Mac.
         "../browser/ui/views/task_manager_view_browsertest.cc",
       ]
-
-      if (safe_browsing_mode == 1) {
-        sources -= [
-          # single-process mode hangs on Mac sometimes because of multiple UI
-          # message loops. See 306348
-          "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-          "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-        ]
-      }
     }
     if (is_win) {
       sources += [
@@ -3932,14 +3841,6 @@ if (!is_android && !is_fuchsia) {
     } else if (enable_extensions) {
       sources -= [ "../browser/extensions/api/braille_display_private/braille_display_private_apitest.cc" ]
     }
-    if (is_chrome_branded && safe_browsing_mode == 1 && !is_mac) {
-      sources -= [
-        # These tests depend on single process mode, which is disabled in
-        # official builds.
-        "../renderer/safe_browsing/phishing_classifier_browsertest.cc",
-        "../renderer/safe_browsing/phishing_classifier_delegate_browsertest.cc",
-      ]
-    }
 
     if (is_chromeos_ash || ((is_linux || is_chromeos_lacros) && use_dbus)) {
       sources += [ "../browser/extensions/api/bluetooth_low_energy/bluetooth_low_energy_apitest.cc" ]
@@ -5056,7 +4957,6 @@ test("unit_tests") {
       "../browser/profiles/profile_avatar_icon_util_unittest.cc",
       "../browser/profiles/profile_destroyer_unittest.cc",
       "../browser/resources_integrity_unittest.cc",
-      "../browser/safe_browsing/generated_safe_browsing_pref_unittest.cc",
       "../browser/speech/speech_recognition_service_factory_unittest.cc",
       "../browser/tab_contents/form_interaction_tab_helper_unittest.cc",
       "../browser/ui/autofill/payments/autofill_dialog_models_unittest.cc",
@@ -5356,20 +5256,6 @@ test("unit_tests") {
     "//components/reputation/core",
     "//components/resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/browser",
-    "//components/safe_browsing/content/browser:client_side_model_loader",
-    "//components/safe_browsing/content/browser/password_protection",
-    "//components/safe_browsing/content/browser/password_protection:mock_password_protection",
-    "//components/safe_browsing/content/browser/web_ui",
-    "//components/safe_browsing/content/common:interfaces",
-    "//components/safe_browsing/content/common:interfaces_shared_cpp_sources",
-    "//components/safe_browsing/core/browser:referrer_chain_provider",
-    "//components/safe_browsing/core/browser:verdict_cache_manager",
-    "//components/safe_browsing/core/browser/db",
-    "//components/safe_browsing/core/browser/db:test_database_manager",
-    "//components/safe_browsing/core/browser/sync",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common/proto:client_model_proto",
     "//components/safe_search_api:test_support",
     "//components/schema_org/common:improved_mojom",
     "//components/search",
@@ -6073,14 +5959,6 @@ test("unit_tests") {
     if (is_win) {
       sources += [
         "../browser/profile_resetter/triggered_profile_resetter_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_fetcher_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_cleaner_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/chrome_prompt_channel_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.cc",
-        "../browser/safe_browsing/chrome_cleaner/mock_chrome_cleaner_process_win.h",
-        "../browser/safe_browsing/chrome_cleaner/reporter_runner_win_unittest.cc",
-        "../browser/safe_browsing/chrome_cleaner/srt_field_trial_win_unittest.cc",
         "../browser/task_manager/sampling/shared_sampler_win_unittest.cc",
         "../utility/importer/edge_database_reader_unittest_win.cc",
       ]
@@ -6667,9 +6545,6 @@ test("unit_tests") {
       "../browser/extensions/api/preference/preference_api_prefs_unittest.cc",
       "../browser/extensions/api/proxy/proxy_api_helpers_unittest.cc",
       "../browser/extensions/api/runtime/chrome_runtime_api_delegate_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_api_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_unittest.cc",
-      "../browser/extensions/api/safe_browsing_private/safe_browsing_util_unittest.cc",
       "../browser/extensions/api/search/search_api_unittest.cc",
       "../browser/extensions/api/settings_private/generated_pref_test_base.cc",
       "../browser/extensions/api/settings_private/generated_pref_test_base.h",
@@ -6780,12 +6655,6 @@ test("unit_tests") {
       "../browser/metrics/extensions_metrics_provider_unittest.cc",
       "../browser/policy/chrome_extension_policy_migrator_unittest.cc",
       "../browser/renderer_context_menu/context_menu_content_type_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_model_unittest.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.cc",
-      "../browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_test_utils.h",
-      "../browser/safe_browsing/test_extension_event_observer.cc",
-      "../browser/safe_browsing/test_extension_event_observer.h",
       "../browser/sync/glue/extensions_activity_monitor_unittest.cc",
       "../browser/sync_file_system/drive_backend/callback_helper_unittest.cc",
       "../browser/sync_file_system/drive_backend/callback_tracker_unittest.cc",
@@ -7077,114 +6946,6 @@ test("unit_tests") {
     }
   }
 
-  if (safe_browsing_mode > 0) {
-    sources += [
-      "../browser/safe_browsing/certificate_reporting_service_unittest.cc",
-      "../browser/safe_browsing/chrome_password_protection_service_unittest.cc",
-      "../browser/safe_browsing/chrome_ui_manager_delegate_unittest.cc",
-      "../browser/safe_browsing/chrome_user_population_helper_unittest.cc",
-      "../browser/safe_browsing/threat_details_unittest.cc",
-    ]
-
-    deps += [
-      "//components/safe_browsing/content/browser:safe_browsing_blocking_page",
-      "//components/safe_browsing/content/common:file_type_policies",
-      "//components/safe_browsing/content/common:file_type_policies_test_support",
-    ]
-  }
-
-  if (safe_browsing_mode == 1) {
-    # TODO(sgurun): enable tests for safe_browsing==2.
-    sources += [
-      "../browser/enterprise/connectors/analysis/content_analysis_delegate_unittest.cc",
-      "../browser/safe_browsing/advanced_protection_status_manager_factory_unittest.cc",
-      "../browser/safe_browsing/advanced_protection_status_manager_unittest.cc",
-      "../browser/safe_browsing/chrome_client_side_detection_host_delegate_unittest.cc",
-      "../browser/safe_browsing/chrome_enterprise_url_lookup_service_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_host_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_service_factory_unittest.cc",
-      "../browser/safe_browsing/client_side_detection_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_fcm_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/binary_upload_service_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.cc",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_test_utils.h",
-      "../browser/safe_browsing/cloud_content_scanning/deep_scanning_utils_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/file_analysis_request_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/file_opening_job_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/multipart_data_pipe_getter_unittest.cc",
-      "../browser/safe_browsing/cloud_content_scanning/multipart_uploader_unittest.cc",
-      "../browser/safe_browsing/download_protection/deep_scanning_request_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_feedback_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_service_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_protection_unittest_util.cc",
-      "../browser/safe_browsing/download_protection/download_protection_unittest_util.h",
-      "../browser/safe_browsing/download_protection/download_protection_util_unittest.cc",
-      "../browser/safe_browsing/download_protection/download_request_maker_unittest.cc",
-      "../browser/safe_browsing/download_protection/file_analyzer_unittest.cc",
-      "../browser/safe_browsing/download_protection/path_sanitizer_unittest.cc",
-      "../browser/safe_browsing/download_protection/two_phase_uploader_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/binary_integrity_incident_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/delayed_callback_runner_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/download_metadata_manager_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/extension_data_collection_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_report_uploader_impl_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/incident_reporting_service_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/last_download_finder_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.cc",
-      "../browser/safe_browsing/incident_reporting/mock_incident_receiver.h",
-      "../browser/safe_browsing/incident_reporting/platform_state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/preference_validation_delegate_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/state_store_unittest.cc",
-      "../browser/safe_browsing/incident_reporting/tracked_preference_incident_unittest.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.cc",
-      "../browser/safe_browsing/local_two_phase_testserver.h",
-      "../browser/safe_browsing/verdict_cache_manager_factory_unittest.cc",
-      "../common/safe_browsing/binary_feature_extractor_unittest.cc",
-      "../common/safe_browsing/download_type_util_unittest.cc",
-      "../common/safe_browsing/ipc_protobuf_message_test_messages.h",
-      "../common/safe_browsing/ipc_protobuf_message_unittest.cc",
-    ]
-    if (is_mac) {
-      sources += [
-        "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_mac_unittest.cc",
-        "../browser/safe_browsing/signature_evaluator_mac_unittest.cc",
-        "../common/safe_browsing/binary_feature_extractor_mac_unittest.cc",
-        "../common/safe_browsing/disk_image_type_sniffer_mac_unittest.cc",
-        "../common/safe_browsing/mach_o_image_reader_mac_unittest.cc",
-        "../utility/safe_browsing/mac/dmg_analyzer_unittest.cc",
-        "../utility/safe_browsing/mac/dmg_test_utils.cc",
-        "../utility/safe_browsing/mac/dmg_test_utils.h",
-        "../utility/safe_browsing/mac/hfs_unittest.cc",
-        "../utility/safe_browsing/mac/read_stream_unittest.cc",
-        "../utility/safe_browsing/mac/udif_unittest.cc",
-      ]
-    }
-    if (is_win) {
-      sources += [
-        "../browser/safe_browsing/incident_reporting/binary_integrity_analyzer_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/environment_data_collection_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.cc",
-        "../browser/safe_browsing/incident_reporting/module_integrity_unittest_util_win.h",
-        "../browser/safe_browsing/incident_reporting/module_integrity_verifier_win_unittest.cc",
-        "../browser/safe_browsing/incident_reporting/platform_state_store_win_unittest.cc",
-        "../common/safe_browsing/binary_feature_extractor_win_unittest.cc",
-      ]
-    }
-    deps += [
-      ":test_proto",
-      "../common/safe_browsing:mock_binary_feature_extractor",
-      "//chrome/common/safe_browsing:binary_feature_extractor",
-      "//chrome/common/safe_browsing:download_type_util",
-      "//chrome/services/file_util/public/cpp:unit_tests",
-    ]
-  } else if (safe_browsing_mode == 2 && is_android) {
-    sources += [
-      "../browser/safe_browsing/android/password_reuse_controller_android_unittest.cc",
-      "../browser/safe_browsing/telemetry/android/android_telemetry_service_unittest.cc",
-    ]
-  }
-
   if (is_linux || is_chromeos || is_mac || is_win || is_fuchsia) {
     sources += [
       "../browser/enterprise/connectors/file_system/access_token_fetcher_unittest.cc",
@@ -7460,10 +7221,6 @@ test("unit_tests") {
       "//third_party/wtl",
       "//ui/resources",
     ]
-    data_deps += [
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_1",
-      "//chrome/browser/safe_browsing/incident_reporting/verifier_test:verifier_test_dll_2",
-    ]
 
     libs = [
       "comsupp.lib",
@@ -7719,9 +7476,6 @@ test("unit_tests") {
       "//chrome/browser/supervised_user/supervised_user_error_page:unit_tests",
     ]
   }
-  if (safe_browsing_mode == 1 && enable_extensions) {
-    sources += [ "../browser/extensions/blocklist_unittest.cc" ]
-  }
 
   if (is_win || is_mac || (is_linux || is_chromeos_lacros)) {
     sources += [
@@ -8000,10 +7754,6 @@ if (!is_android) {
     }
   }
 
-  proto_library("test_proto") {
-    sources = [ "../common/safe_browsing/ipc_protobuf_message_test.proto" ]
-  }
-
   if (is_chromeos_ash) {
     assert(enable_extensions)
 
@@ -9388,23 +9138,6 @@ if (!is_android && !is_fuchsia) {
   }
 }
 
-if (is_win) {
-  fuzzer_test("safe_browsing_binary_feature_extractor_fuzzer") {
-    sources = [ "../common/safe_browsing/binary_feature_extractor_fuzzer.cc" ]
-    deps = [
-      "//base",
-      "//chrome/common/safe_browsing:binary_feature_extractor",
-      "//components/safe_browsing/core/common/proto:csd_proto",
-      "//crypto",
-    ]
-    libs = [ "wintrust.lib" ]
-
-    # Directory contains useful and non-useful files. Don't worry about
-    # non-useful since they are eliminated during pruning.
-    seed_corpus = "data/safe_browsing/download_protection/"
-  }
-}
-
 if (is_win) {
   test("pixel_browser_tests") {
     sources = [ "pixel/demo/skia_gold_demo_pixeltest.cc" ]
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -224,13 +224,6 @@ static_library("utility") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/services/file_util" ]
-    if (is_mac) {
-      deps += [ "//chrome/utility/safe_browsing/mac" ]
-    }
-  }
-
   if (is_android || enable_extensions) {
     deps += [ "//chrome/services/media_gallery_util:lib" ]
   }
--- a/components/blocked_content/BUILD.gn
+++ b/components/blocked_content/BUILD.gn
@@ -17,8 +17,6 @@ source_set("blocked_content") {
     "popup_tracker.h",
     "pref_names.cc",
     "pref_names.h",
-    "safe_browsing_triggered_popup_blocker.cc",
-    "safe_browsing_triggered_popup_blocker.h",
     "url_list_manager.cc",
     "url_list_manager.h",
   ]
@@ -31,7 +29,6 @@ source_set("blocked_content") {
     "//components/embedder_support",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/core/browser/db:util",
     "//components/subresource_filter/content/browser",
     "//components/ukm/content",
     "//components/user_prefs",
--- a/components/blocked_content/popup_blocker.cc
+++ b/components/blocked_content/popup_blocker.cc
@@ -10,7 +10,6 @@
 #include "base/command_line.h"
 #include "components/blocked_content/popup_blocker_tab_helper.h"
 #include "components/blocked_content/popup_navigation_delegate.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
 #include "components/embedder_support/switches.h"
@@ -81,13 +80,6 @@ PopupBlockType ShouldBlockPopup(content:
     return PopupBlockType::kNotBlocked;
   }
 
-  auto* safe_browsing_blocker =
-      SafeBrowsingTriggeredPopupBlocker::FromWebContents(web_contents);
-  if (safe_browsing_blocker &&
-      safe_browsing_blocker->ShouldApplyAbusivePopupBlocker(
-          GetSourcePageForPopup(open_url_params, web_contents))) {
-    return PopupBlockType::kAbusive;
-  }
   return PopupBlockType::kNotBlocked;
 }
 
--- a/components/blocked_content/popup_blocker_tab_helper.cc
+++ b/components/blocked_content/popup_blocker_tab_helper.cc
@@ -13,7 +13,6 @@
 #include "components/blocked_content/list_item_position.h"
 #include "components/blocked_content/popup_navigation_delegate.h"
 #include "components/blocked_content/popup_tracker.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/browser/page_specific_content_settings.h"
 #include "content/public/browser/back_forward_cache.h"
 #include "content/public/browser/navigation_controller.h"
@@ -42,7 +41,6 @@ struct PopupBlockerTabHelper::BlockedReq
 
 PopupBlockerTabHelper::PopupBlockerTabHelper(content::WebContents* web_contents)
     : content::WebContentsObserver(web_contents) {
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::MaybeCreate(web_contents);
 }
 
 PopupBlockerTabHelper::~PopupBlockerTabHelper() = default;
--- a/components/components_strings.grd
+++ b/components/components_strings.grd
@@ -320,7 +320,6 @@
       <part file="printing_component_strings.grdp" />
       <part file="privacy_sandbox_strings.grdp" />
       <part file="reset_password_strings.grdp" />
-      <part file="safe_browsing_strings.grdp" />
       <part file="security_interstitials_strings.grdp" />
       <part file="security_state_strings.grdp" />
       <part file="send_tab_to_self_strings.grdp" />
--- a/components/page_info/BUILD.gn
+++ b/components/page_info/BUILD.gn
@@ -25,9 +25,6 @@ static_library("page_info") {
     "//components/permissions",
     "//components/prefs",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/browser/password_protection",
-    "//components/safe_browsing/core/browser/password_protection:password_protection_metrics_util",
-    "//components/safe_browsing/core/common/proto:csd_proto",
     "//components/security_interstitials/content:security_interstitial_page",
     "//components/security_interstitials/core",
     "//components/security_state/core",
--- a/components/page_info/page_info.cc
+++ b/components/page_info/page_info.cc
@@ -44,9 +44,6 @@
 #endif
 #include "build/chromeos_buildflags.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/password_protection/password_protection_service.h"
-#include "components/safe_browsing/core/browser/password_protection/metrics_util.h"
-#include "components/safe_browsing/core/common/proto/csd.pb.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/ssl_errors/error_info.h"
@@ -73,8 +70,6 @@ using base::ASCIIToUTF16;
 using base::UTF16ToUTF8;
 using base::UTF8ToUTF16;
 using content::BrowserThread;
-using safe_browsing::LoginReputationClientResponse;
-using safe_browsing::RequestOutcome;
 
 namespace {
 
--- a/components/password_manager/core/browser/BUILD.gn
+++ b/components/password_manager/core/browser/BUILD.gn
@@ -287,8 +287,6 @@ static_library("browser") {
     "//components/pref_registry",
     "//components/prefs",
     "//components/profile_metrics",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
     "//components/signin/public/identity_manager",
     "//components/strings",
@@ -747,8 +745,6 @@ source_set("unit_tests") {
     "//components/password_manager/core/browser/leak_detection:unit_tests",
     "//components/password_manager/core/common",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
     "//components/signin/public/identity_manager:test_support",
     "//components/strings",
--- a/components/password_manager/core/browser/password_manager_client.h
+++ b/components/password_manager/core/browser/password_manager_client.h
@@ -62,9 +62,11 @@ class Origin;
 
 class GURL;
 
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 namespace safe_browsing {
 class PasswordProtectionService;
 }
+#endif
 
 namespace device_reauth {
 class BiometricAuthenticator;
@@ -355,7 +357,7 @@ class PasswordManagerClient {
                                            const GURL& frame_url) = 0;
 #endif
 
-#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
+#if defined(PASSWORD_REUSE_DETECTION_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   // Checks the safe browsing reputation of the webpage where password reuse
   // happens. This is called by the PasswordReuseDetectionManager when a
   // protected password is typed on the wrong domain. This may trigger a
--- a/components/password_manager/core/browser/password_reuse_detector.cc
+++ b/components/password_manager/core/browser/password_reuse_detector.cc
@@ -201,13 +201,6 @@ PasswordReuseDetector::CheckNonGaiaEnter
     return absl::nullopt;
   }
 
-  // Skips password reuse check if |domain| matches enterprise login URL or
-  // enterprise change password URL.
-  GURL page_url(domain);
-  if (enterprise_password_urls_.has_value()) {
-    return absl::nullopt;
-  }
-
   return FindPasswordReuse(input, enterprise_password_hash_data_list_.value());
 }
 
--- a/components/password_manager/core/browser/stub_password_manager_client.cc
+++ b/components/password_manager/core/browser/stub_password_manager_client.cc
@@ -105,25 +105,6 @@ StubPasswordManagerClient::GetPasswordFe
   return &password_feature_manager_;
 }
 
-safe_browsing::PasswordProtectionService*
-StubPasswordManagerClient::GetPasswordProtectionService() const {
-  return nullptr;
-}
-
-#if defined(ON_FOCUS_PING_ENABLED)
-void StubPasswordManagerClient::CheckSafeBrowsingReputation(
-    const GURL& form_action,
-    const GURL& frame_url) {}
-#endif
-
-void StubPasswordManagerClient::CheckProtectedPasswordEntry(
-    metrics_util::PasswordType reused_password_type,
-    const std::string& username,
-    const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-    bool password_field_exists) {}
-
-void StubPasswordManagerClient::LogPasswordReuseDetectedEvent() {}
-
 ukm::SourceId StubPasswordManagerClient::GetUkmSourceId() {
   return ukm_source_id_;
 }
--- a/components/password_manager/core/browser/stub_password_manager_client.h
+++ b/components/password_manager/core/browser/stub_password_manager_client.h
@@ -66,22 +66,6 @@ class StubPasswordManagerClient : public
   MockPasswordFeatureManager* GetPasswordFeatureManager();
   bool IsAutofillAssistantUIVisible() const override;
 
-  safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
-      const override;
-
-#if defined(ON_FOCUS_PING_ENABLED)
-  void CheckSafeBrowsingReputation(const GURL& form_action,
-                                   const GURL& frame_url) override;
-#endif
-
-  void CheckProtectedPasswordEntry(
-      metrics_util::PasswordType reused_password_type,
-      const std::string& username,
-      const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-      bool password_field_exists) override;
-
-  void LogPasswordReuseDetectedEvent() override;
-
   ukm::SourceId GetUkmSourceId() override;
   PasswordManagerMetricsRecorder* GetMetricsRecorder() override;
   signin::IdentityManager* GetIdentityManager() override;
--- a/components/safe_browsing/core/browser/db/v4_get_hash_protocol_manager.cc
+++ b/components/safe_browsing/core/browser/db/v4_get_hash_protocol_manager.cc
@@ -610,9 +610,6 @@ bool V4GetHashProtocolManager::ParseHash
     FullHashInfo full_hash_info(match.threat().hash(), list_id,
                                 positive_expiry);
     ParseMetadata(match, &full_hash_info.metadata);
-    TRACE_EVENT2("safe_browsing", "V4GetHashProtocolManager::ParseHashResponse",
-                 "threat_type", full_hash_info.list_id.threat_type(),
-                 "metadata", full_hash_info.metadata.ToTracedValue());
     full_hash_infos->push_back(full_hash_info);
   }
   return true;
--- a/components/search_engines/search_terms_data.cc
+++ b/components/search_engines/search_terms_data.cc
@@ -33,7 +33,7 @@ std::string SearchTermsData::GoogleBaseS
 std::string SearchTermsData::GoogleBaseSuggestURLValue() const {
   // Start with the Google base URL.
   const GURL base_url(GoogleBaseURLValue());
-  DCHECK(base_url.is_valid());
+  //DCHECK(base_url.is_valid());
 
   GURL::Replacements repl;
 
--- a/components/signin/internal/identity_manager/primary_account_manager.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager.cc
@@ -130,19 +130,6 @@ void PrimaryAccountManager::SetSyncPrima
   DCHECK(!account_info.account_id.empty());
   DCHECK(!HasPrimaryAccount(signin::ConsentLevel::kSync));
 
-#if DCHECK_IS_ON()
-  {
-    std::string pref_account_id;
-    bool consented_to_sync =
-        client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
-
-    DCHECK(pref_account_id.empty() || !consented_to_sync ||
-           pref_account_id == account_info.account_id.ToString())
-        << "account_id=" << account_info.account_id
-        << " pref_account_id=" << pref_account_id;
-  }
-#endif  // DCHECK_IS_ON()
-
   SetPrimaryAccountInternal(account_info, /*consented_to_sync=*/true);
 
   // Go ahead and update the last signed in account info here as well. Once a
--- a/components/subresource_filter/content/browser/BUILD.gn
+++ b/components/subresource_filter/content/browser/BUILD.gn
@@ -40,12 +40,6 @@ static_library("browser") {
     "subresource_filter_observer_manager.h",
     "subresource_filter_profile_context.cc",
     "subresource_filter_profile_context.h",
-    "subresource_filter_safe_browsing_activation_throttle.cc",
-    "subresource_filter_safe_browsing_activation_throttle.h",
-    "subresource_filter_safe_browsing_client.cc",
-    "subresource_filter_safe_browsing_client.h",
-    "subresource_filter_safe_browsing_client_request.cc",
-    "subresource_filter_safe_browsing_client_request.h",
     "unindexed_ruleset_stream_generator.cc",
     "unindexed_ruleset_stream_generator.h",
     "verified_ruleset_dealer.cc",
@@ -58,8 +52,6 @@ static_library("browser") {
     "//components/content_settings/core/common",
     "//components/keyed_service/core",
     "//components/prefs:prefs",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/browser/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/common",
@@ -106,8 +98,6 @@ static_library("test_support") {
     "ad_tagging_browser_test_utils.h",
     "async_document_subresource_filter_test_utils.cc",
     "async_document_subresource_filter_test_utils.h",
-    "fake_safe_browsing_database_manager.cc",
-    "fake_safe_browsing_database_manager.h",
     "subframe_navigation_test_utils.cc",
     "subframe_navigation_test_utils.h",
     "subresource_filter_observer_test_utils.cc",
@@ -128,7 +118,6 @@ static_library("test_support") {
     "//components/infobars/content",
     "//components/infobars/core",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core/browser/db:database_manager",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/browser:test_support",
@@ -144,8 +133,6 @@ static_library("test_support") {
     "//url",
   ]
   public_deps = [
-    "//components/safe_browsing/core/browser/db:test_database_manager",
-    "//components/safe_browsing/core/browser/db:util",
   ]
 }
 
@@ -163,7 +150,6 @@ source_set("unit_tests") {
     "subframe_navigation_filtering_throttle_unittest.cc",
     "subresource_filter_configuration_unittest.cc",
     "subresource_filter_content_settings_manager_unittest.cc",
-    "subresource_filter_safe_browsing_activation_throttle_unittest.cc",
     "subresource_filter_unittest.cc",
     "verified_ruleset_dealer_unittest.cc",
   ]
@@ -177,8 +163,6 @@ source_set("unit_tests") {
     "//components/infobars/content",
     "//components/infobars/core",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core/browser/db:database_manager",
-    "//components/safe_browsing/core/browser/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/browser:test_support",
--- a/components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.cc
+++ b/components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.cc
@@ -107,9 +107,6 @@ ContentSubresourceFilterThrottleManager:
     VerifiedRulesetDealer::Handle* dealer_handle,
     ContentSubresourceFilterWebContentsHelper& web_contents_helper,
     content::NavigationHandle& initiating_navigation_handle) {
-  if (!base::FeatureList::IsEnabled(kSafeBrowsingSubresourceFilter))
-    return nullptr;
-
   return std::make_unique<ContentSubresourceFilterThrottleManager>(
       profile_context, database_manager, dealer_handle, web_contents_helper,
       initiating_navigation_handle);
@@ -558,13 +555,6 @@ void ContentSubresourceFilterThrottleMan
   DCHECK(!navigation_handle->IsSameDocument());
   DCHECK(!ShouldInheritActivation(navigation_handle->GetURL()));
 
-  if (navigation_handle->IsInMainFrame() && database_manager_) {
-    throttles->push_back(
-        std::make_unique<SubresourceFilterSafeBrowsingActivationThrottle>(
-            navigation_handle, profile_interaction_manager_.get(),
-            content::GetIOThreadTaskRunner({}), database_manager_));
-  }
-
   if (!dealer_handle_)
     return;
   if (auto filtering_throttle =
--- a/testing/variations/fieldtrial_testing_config.json
+++ b/testing/variations/fieldtrial_testing_config.json
@@ -7529,244 +7529,6 @@
             ]
         }
     ],
-    "SafeBrowsingCSDCompareModelsAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "EnabledFlatbuffer_20210723",
-                    "params": {
-                        "reporter_omaha_tag": "25.3"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionModelIsFlatBuffer",
-                        "ClientSideDetectionModelOnAndroid",
-                        "ClientSideDetectionTag"
-                    ]
-                },
-                {
-                    "name": "EnabledProtobuf_20210723",
-                    "params": {
-                        "reporter_omaha_tag": "25.2"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionModelOnAndroid",
-                        "ClientSideDetectionTag"
-                    ],
-                    "disable_features": [
-                        "ClientSideDetectionModelIsFlatBuffer"
-                    ]
-                },
-                {
-                    "name": "EnabledTfLiteOnly_20210723",
-                    "params": {
-                        "reporter_omaha_tag": "25.4"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionModelIsFlatBuffer",
-                        "ClientSideDetectionModelOnAndroid",
-                        "ClientSideDetectionTag"
-                    ]
-                },
-                {
-                    "name": "EnabledTfLiteAndFlatbuffer_20210723",
-                    "params": {
-                        "reporter_omaha_tag": "25.5"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionModelIsFlatBuffer",
-                        "ClientSideDetectionModelOnAndroid",
-                        "ClientSideDetectionTag"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingCSDRequestWithToken": [
-        {
-            "platforms": [
-                "android",
-                "android_weblayer",
-                "chromeos",
-                "chromeos_lacros",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingCSDRequestWithToken"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingCTDownloadWarning": [
-        {
-            "platforms": [
-                "chromeos",
-                "chromeos_lacros",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingCTDownloadWarning"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingCsdComponentVersion25": [
-        {
-            "platforms": [
-                "chromeos",
-                "chromeos_lacros",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled25_052021",
-                    "params": {
-                        "reporter_omaha_tag": "25"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionTag"
-                    ]
-                },
-                {
-                    "name": "Enabled26_052021",
-                    "params": {
-                        "reporter_omaha_tag": "26"
-                    },
-                    "enable_features": [
-                        "ClientSideDetectionTag"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingDelayedWarnings": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingDelayedWarnings"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordCheckIntegrationForSavedPasswordsAndroid": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordCheckIntegrationForSavedPasswordsAndroid"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPasswordProtectionRequestWithToken": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "chromeos_lacros",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingPasswordProtectionRequestWithToken"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingPerProfileNetworkContexts": [
-        {
-            "platforms": [
-                "windows",
-                "linux",
-                "mac"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled",
-                    "enable_features": [
-                        "SafeBrowsingRemoveCookies",
-                        "SafeBrowsingSeparateNetworkContexts"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingRealTimeUrlLookupReferrerChain": [
-        {
-            "platforms": [
-                "android",
-                "chromeos",
-                "chromeos_lacros",
-                "linux",
-                "mac",
-                "windows"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled_20200422",
-                    "params": {
-                        "SafeBrowsingRealTimeUrlLookupReferrerLengthParam": "2"
-                    },
-                    "enable_features": [
-                        "SafeBrowsingRealTimeUrlLookupReferrerChain"
-                    ]
-                }
-            ]
-        }
-    ],
-    "SafeBrowsingVisualFeaturesSizes": [
-        {
-            "platforms": [
-                "android"
-            ],
-            "experiments": [
-                {
-                    "name": "Enabled_20210719",
-                    "params": {
-                        "min_height": "258",
-                        "min_width": "258",
-                        "phash_height": "192",
-                        "phash_width": "108"
-                    },
-                    "enable_features": [
-                        "VisualFeaturesSizes"
-                    ]
-                }
-            ]
-        }
-    ],
     "ScrollResamplingRollout": [
         {
             "platforms": [
--- a/third_party/unrar/BUILD.gn
+++ b/third_party/unrar/BUILD.gn
@@ -20,85 +20,3 @@ config("unrar_warnings") {
     "-Wno-missing-braces",
   ]
 }
-
-static_library("unrar") {
-  sources = [
-    "src/archive.cpp",
-    "src/arcread.cpp",
-    "src/blake2s.cpp",
-    "src/cmddata.cpp",
-    "src/consio.cpp",
-    "src/crc.cpp",
-    "src/crypt.cpp",
-    "src/encname.cpp",
-    "src/errhnd.cpp",
-    "src/extinfo.cpp",
-    "src/extract.cpp",
-    "src/filcreat.cpp",
-    "src/file.cpp",
-    "src/filefn.cpp",
-    "src/filestr.cpp",
-    "src/find.cpp",
-    "src/getbits.cpp",
-    "src/global.cpp",
-    "src/hash.cpp",
-    "src/headers.cpp",
-    "src/list.cpp",
-    "src/match.cpp",
-    "src/options.cpp",
-    "src/pathfn.cpp",
-    "src/qopen.cpp",
-    "src/rarvm.cpp",
-    "src/rawread.cpp",
-    "src/rdwrfn.cpp",
-    "src/recvol.cpp",
-    "src/resource.cpp",
-    "src/rijndael.cpp",
-    "src/rs.cpp",
-    "src/rs16.cpp",
-    "src/scantree.cpp",
-    "src/secpassword.cpp",
-    "src/sha1.cpp",
-    "src/sha256.cpp",
-    "src/smallfn.cpp",
-    "src/strfn.cpp",
-    "src/strlist.cpp",
-    "src/system.cpp",
-    "src/threadpool.cpp",
-    "src/timefn.cpp",
-    "src/ui.cpp",
-    "src/unicode.cpp",
-    "src/unpack.cpp",
-    "src/unrar_wrapper.cc",
-    "src/volume.cpp",
-  ]
-  if (is_win) {
-    sources += [ "src/isnt.cpp" ]
-  }
-
-  configs -= [ "//build/config/compiler:chromium_code" ]
-  configs += [
-    "//build/config/compiler:no_chromium_code",
-
-    # This must be after no_chromium_code for warning flags to be ordered
-    # correctly.
-    ":unrar_warnings",
-  ]
-
-  defines = [
-    "_FILE_OFFSET_BITS=64",
-    "LARGEFILE_SOURCE",
-    "RAR_SMP",
-    "SILENT",
-    "NOVOLUME",
-
-    # The following is set to disable certain macro definitions in the unrar
-    # source code.
-    "CHROMIUM_UNRAR",
-
-    # Disables exceptions in unrar, replaces them with process termination.
-    "UNRAR_NO_EXCEPTIONS",
-  ]
-
-  deps = [ "//base" ]
-}
--- a/tools/ipc_fuzzer/message_lib/BUILD.gn
+++ b/tools/ipc_fuzzer/message_lib/BUILD.gn
@@ -11,10 +11,8 @@ static_library("ipc_message_lib") {
   public_deps = [
     "//base",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/guest_view/common",
     "//components/nacl/common:buildflags",
-    "//components/safe_browsing/core/common",
     "//components/spellcheck/common",
     "//components/subresource_filter/content/common",
     "//content/child",
